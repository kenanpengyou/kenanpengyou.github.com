<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>acgtofe - 动漫与前端技术的综合博客</title>
 <link href="http://acgtofe.com/atom.xml" rel="self"/>
 <link href="http://acgtofe.com"/>
 <updated>2014-05-20T18:14:40+08:00</updated>
 <id>http://acgtofe.com</id>
 <author>
   <name>Liang Zhu</name>
   <email>kenanpengyou@gmail.com</email>
 </author>

 
 <entry>
   <title>前端也要做文字截断！</title>
   <link href="http://acgtofe.com/posts/2014/04/text-truncation"/>
   <updated>2014-04-26T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2014/04/text-truncation</id>
   <content type="html">&lt;p&gt;&lt;del&gt;请无视标题的中二气息&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;在网页等界面设计中，会有文字排版的问题。其中很常见的问题是，某个文字区域的文字很多，超出设计稿中数据的时候，应该怎样。&lt;/p&gt;

&lt;p&gt;文字截断就是应对这种情况的。以及，我们用文字截断，一方面是避免页面内容的排版因为某些地方文字过多而乱掉，另一方面则单纯是美观、整洁、合理性的需要。&lt;/p&gt;

&lt;h2&gt;前端或后端谁来做？&lt;/h2&gt;

&lt;p&gt;文字过多是一个数据层面的原因。假设文字不是数据，而是固定的文案，那么只要验证一下做出来的网页，然后确认没问题，那就不会有问题。数据一般是后端的工作，所以文字截断也一般由后端完成。&lt;/p&gt;

&lt;p&gt;比如，在一个文字区域，1行半是认为的比较合适的极限（超出则截掉，并在后面加上&lt;code&gt;...&lt;/code&gt;），那就写一份刚好到这个位置的文案，然后看下有多少字符，然后用这个字符数在后端代码中做截断。&lt;/p&gt;

&lt;p&gt;看起来很靠谱，那为什么还会有需要前端做截断的情况呢？&lt;/p&gt;

&lt;p&gt;这是因为，后端在字符层面的截断实际是不可靠的。这里不是说截的字符数不准，而是说，只保证字符数，网页排版也可能出问题。&lt;/p&gt;

&lt;p&gt;下面是一个中英文的字符宽度测试（字体：&lt;code&gt;Arial, sans-serif&lt;/code&gt;）：&lt;/p&gt;

&lt;div id=&quot;character&quot; class=&quot;post_display character_width_test&quot;&gt;&lt;/div&gt;


&lt;p&gt;其中红色数字是对应的字符宽度（单位：&lt;code&gt;px&lt;/code&gt;）。可以看到，不同的英文字符，在网页中占据的宽度可以不同。想象一下同样的字符数目下，全是&lt;code&gt;l&lt;/code&gt;这种较小宽度的字符的情况，与全是&lt;code&gt;W&lt;/code&gt;这种较大宽度的字符的情况相比，文字宽度会有多少差距。这个不确定的差距，就可能带来问题。&lt;/p&gt;

&lt;p&gt;上面的测试中特意提到了字体。这是因为，&lt;em&gt;字符所占据的宽度与所使用的字体有关&lt;/em&gt;。网页常用的如&lt;code&gt;Arial&lt;/code&gt;，&lt;code&gt;Helvetica&lt;/code&gt;，&lt;code&gt;Verdana&lt;/code&gt;等英文字体都是不等宽的。不过，中文汉字，基本都是等宽的（中文字体都是等宽）。所谓汉字称为“方块字”，也正符合这个意思（・ｖ・）。你可以查看&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93&quot; title=&quot;等宽字体 - 维基百科&quot;&gt;维基百科上对等宽字体的解释&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;由于我们做文字截断要的都是最后的显示效果，而显示效果正是前端的工作。因此，相对于后端在数据和字符层面的处理，前端的优势是无视内容，直接从显示效果来做最适当的截断，因此是可靠的。&lt;/p&gt;

&lt;h2&gt;css文字截断&lt;/h2&gt;

&lt;p&gt;css可以做到的文字截断概括为：&lt;em&gt;单行定宽，多行定高&lt;/em&gt;。如果不是这样，就不能仅依靠css实现。&lt;/p&gt;

&lt;h3&gt;单行定宽&lt;/h3&gt;

&lt;p&gt;下面的css代码用于单行定宽的截断：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.truncation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;/* 假定是文字区域限制为100px */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;white-space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nowrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ellipsis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样对应的效果是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201404/css_truncation_one.png&quot; title=&quot;css截断-单行定宽&quot; alt=&quot;css截断-单行定宽&quot; /&gt;&lt;/p&gt;

&lt;p&gt;文字后会有&lt;code&gt;...&lt;/code&gt;，天然的提示效果。&lt;/p&gt;

&lt;h3&gt;多行定高&lt;/h3&gt;

&lt;p&gt;多行定高的css截断：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.truncation_multiple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;48px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* 假定限制2行 */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;24px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* 行高自行设置 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对应的效果是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201404/css_truncation_multiple.png&quot; title=&quot;css截断-多行定高&quot; alt=&quot;css截断-多行定高&quot; /&gt;&lt;/p&gt;

&lt;p&gt;多行定高只是利用css本身的&lt;code&gt;overflow: hidden;&lt;/code&gt;把超出部分隐藏掉，没有提示，看起来有些不够友好，但仍然有一定用途。&lt;/p&gt;

&lt;h2&gt;javascript文字截断&lt;/h2&gt;

&lt;p&gt;javascript可以实现更多类型的文字截断。一个可行的实现原理是：创建一个用于临时存放文字的可见元素，然后填入原文字，再检测文字的显示情况，如果文字超出了预定范围，则去掉文字的最后一个字符，依次进行直到文字的显示在预定范围内，最后再移除临时存放文字的元素。&lt;/p&gt;

&lt;h3&gt;单行限定宽度&lt;/h3&gt;

&lt;p&gt;比较简单的情况是仅检测文字的宽度，这时候对应实现是单行定宽的截断：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;truncation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constants&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;SUFFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;doOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;widthLimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetStyles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;containerNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;suffix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SUFFIX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetStyles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;targetStyles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;containerNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetStyles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;containerNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;absolute&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;containerNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;containerNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;containerNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;widthLimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;containerNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;widthLimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;containerNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;containerNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;containerNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面这段代码定义了一个&lt;code&gt;truncation&lt;/code&gt;对象，其方法&lt;code&gt;doOne()&lt;/code&gt;用来对文字做单行定宽的截断。由于文字宽度还与所在区域的文字样式有关，因此参数还需要包括相关的文字样式。循环减少字符并判断宽度，即可实现符合要求的文字截断的。实际使用像下面这样：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Little Busters!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 假定是这样的文字&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;resultText1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 返回截断后的结果&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;resultText1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;truncation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;14px&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;多行限定行数和最后一行的宽度&lt;/h3&gt;

&lt;p&gt;多行的较为复杂的情况，比如限制在1行半，仍然可以应用循环减少字符并分析的思路来完成。这时候需要用到&lt;code&gt;getClientRects()&lt;/code&gt;这个适于获取多行文字状态的方法。我继续沿用前面代码新增了方法&lt;code&gt;doMultiple()&lt;/code&gt;，用于在限定行数及最后一行内容宽度的情况下做截断，具体请查看&lt;a href=&quot;http://runjs.cn/code/raoe7n4c&quot; title=&quot;runJS上的源码&quot;&gt;runJS上的源码&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;注意，&lt;code&gt;getClientRects&lt;/code&gt;方法在IE6-7中存在bug（详见&lt;a href=&quot;http://www.quirksmode.org/dom/w3c_cssom.html#t22&quot; title=&quot;W3C DOM Compatibility - CSS Object Model View&quot;&gt;quirksmode&lt;/a&gt;），所以此方法不能应用于IE6-7。&lt;/p&gt;

&lt;h3&gt;临时元素会被看到吗&lt;/h3&gt;

&lt;p&gt;来说一个其他的话题。在前面的代码中，创建了一个元素，添加到可视区域，在截断完成后，再从可视区域移除它。但在这个过程中，并没有对该元素设置&lt;code&gt;visibility: hidden;&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;...这样不会被发现么？&lt;/p&gt;

&lt;p&gt;关于这一点的解释是这样的：从代码角度看，更改是即时生效的（否则不会获取到不断减小的文本宽度），但从视效角度看，在所有当前代码执行完毕，回到事件队列（javascript的线程空闲）之前，浏览器是不会渲染这些DOM变化效果的。在本文的例子中，由于当前代码执行完毕时元素已经从可视区域移除，所以整个过程都不会看到它。你可以查看&lt;a href=&quot;http://jsfiddle.net/TrevorBurnham/SNBYV/&quot; title=&quot;jsfiddle - 演示&quot;&gt;jsfiddle上的一个简单演示&lt;/a&gt;，确认这一点。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;尽管前端可以做到这样无视内容的精确截断，但在大部分时候，文字截断并不需要那么确切。比如说，1行半的内容，稍微多点，少点，也没关系，不会打乱页面排版。所以，后端的截断尽管还需要考虑字符内容，但也足够实用了。从实际项目的角度来说，如果有必要，前后端都可以加上文字截断的处理。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>创建自定义外观的表单select</title>
   <link href="http://acgtofe.com/posts/2014/03/custom-select"/>
   <updated>2014-03-19T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2014/03/custom-select</id>
   <content type="html">&lt;p&gt;网页表单中的&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;，在不同浏览器中的默认外观是不同的，比如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201403/default_select_appearance.png&quot; title=&quot;表单select默认外观&quot; alt=&quot;表单select默认外观&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了边框，宽高等差异外，表示下拉的小箭头也是各不相同。不过，整体上说，差异并不是特别大，所以，很多时候直接使用这种原生select就足够了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ued.ctrip.com/blog/?p=3229&quot; title=&quot;select的最佳预设（reset）&quot;&gt;携程UED上的一篇文章&lt;/a&gt;探讨过设置css使select在不同浏览器中的外观更倾向于一致的做法（注意，这已经是2年前的文章了，所以里面的信息会有偏差）。但显然，要实现更一致、美观的表单，我们应该做的就是&lt;em&gt;自定义&lt;/em&gt;。&lt;/p&gt;

&lt;h2&gt;准备工作&lt;/h2&gt;

&lt;p&gt;select可以看做两部分组成的。这样，首先我们就是设计一下这两部分的外观：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201403/custom_select_design.png&quot; title=&quot;自定义外观设计&quot; alt=&quot;自定义外观设计&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这两部分会是这样的html代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;-2014年4月番-&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript:;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;-2014年4月番-&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript:;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;艾斯卡与罗吉的工作室&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript:;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Love Live! 第2期&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;javascript:;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;漫画家与助手们&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后，为它们添加class，定义好样式，准备工作就结束了。接下来是实现交互功能。&lt;/p&gt;

&lt;h2&gt;添加功能&lt;/h2&gt;

&lt;p&gt;本文使用了javascript库—YUI。它的参考资料并不多，建议直接查看&lt;a href=&quot;http://yuilibrary.com/yui/docs/&quot; title=&quot;YUI Documentation&quot;&gt;官方文档&lt;/a&gt;。此外，还有一个非常推荐的参考站点&lt;a href=&quot;http://www.jsrosettastone.com/&quot; title=&quot;jQuery - YUI 3 Rosetta Stone&quot;&gt;jQuery - YUI 3 Rosetta Stone&lt;/a&gt;，它通过对比形式列出了某一功能如何分别用YUI和jQuery实现。&lt;/p&gt;

&lt;p&gt;我的自定义select的功能实现的思路是这样的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;html代码本身仍然是原生的select。&lt;/li&gt;
&lt;li&gt;javascript找到这些select，然后为每一个select，都创建一份自定义元素，内容和原select相同。&lt;/li&gt;
&lt;li&gt;将自定义元素摆放到select原本所在的位置，并隐藏掉原来的select。&lt;/li&gt;
&lt;li&gt;修改自定义元素的选择项，将对应地改变原本的select的选择项。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;这个过程中，把select自定义想成了更像是附加功能的形式。表单提交只会提交原生select的信息，而如果禁用javascript，则原生select正常使用。&lt;/p&gt;

&lt;p&gt;整个代码结构是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;YUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;customSelect&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;customSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 常量&amp;amp;参数&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constants&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 变量&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectReplaceNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;replaceHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;layerNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;layerItemNodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;timeFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 浮层显示状态标识&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;isLayerShowed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 取原生DOM对象（而不是YUI的Node外观对象），更方便读取select信息&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;selectDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;selectedIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;indexTotal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;selectedOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;selectedText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 一系列函数声明&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 初始化代码&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;整个功能只需要用到YUI的node模块。这个结构是我编写各类功能一般遵循的格式，这样确定之后，剩余的所有代码都是一系列函数声明。显然，变量和常量也不是一开始就能定下来，而是随着编写过程，根据需要随时添加或删减，它们都可以被这一系列定义的函数访问到。&lt;/p&gt;

&lt;h3&gt;初始化&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;init()&lt;/code&gt;初始化函数是所有代码执行的入口，定义如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;selectNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;assignData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 变量赋值&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;createReplace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 创建自定义元素&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;bindEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 事件绑定&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里只是判断如果元素存在，则依次执行一系列操作。&lt;/p&gt;

&lt;h3&gt;获取select信息&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;assignData()&lt;/code&gt;的代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assignData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;selectDOM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDOMNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;selectedIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;indexTotal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;selectedOption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;selectedText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectedOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这部分是因为要生成一个内容相同的自定义元素，需要先读取并保存原select的信息。&lt;/p&gt;

&lt;h3&gt;创建替换元素&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;createReplace()&lt;/code&gt;即创建替换元素的部分。它的代码较多，在此不直接贴出来。你可以打开前端开发工具来查看本页中的代码，也可以到&lt;a href=&quot;http://runjs.cn/code/4pqwwqqm&quot; title=&quot;自定义外观select-RunJS&quot;&gt;runJS上的完整源码&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;对这一部分的一些说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;html生成使用字符串连接（更好的做法是模板引擎，但也相对更复杂）。&lt;/li&gt;
&lt;li&gt;替换元素需要设置适当宽度，所以要遍历选择项确定最大的宽度。&lt;/li&gt;
&lt;li&gt;替换元素设置&lt;code&gt;tabindex&lt;/code&gt;是为了处理键盘上下和回车的控制。&lt;/li&gt;
&lt;li&gt;下拉浮层的每一项代表的索引值是用html5自定义属性来标记的。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;这里还用到一个特殊的样式类名&lt;code&gt;Constants.HIDDEN_CLASS&lt;/code&gt;，即&lt;code&gt;remote_invisible&lt;/code&gt;，它的定义是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.remote_invisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9999em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可见是一个隐藏用的样式。&lt;/p&gt;

&lt;h3&gt;事件及事件处理&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;bindEvents()&lt;/code&gt;将绑定各类事件。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bindEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;selectReplaceNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mouseover&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;replaceMouseoverHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;selectReplaceNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mouseout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;replaceMouseoutHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;selectReplaceNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;keydown&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;layerKeydownHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;layerNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mouseover&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;layerMouseoverHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;layerNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;mouseout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;layerMouseoutHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;layerNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;layerLinkClickHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LINK_CLASS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不同于原生select是点击出下拉的情况，我的设计是鼠标移入到替换元素时，即显示下拉浮层。所以，这里绑定的事件种类就是上面这样的。&lt;/p&gt;

&lt;p&gt;剩下的部分是事件处理函数及它们引用的应用逻辑函数。同样，它们的代码也请见&lt;a href=&quot;http://runjs.cn/code/4pqwwqqm&quot; title=&quot;自定义外观select-RunJS&quot;&gt;runJS上的完整源码&lt;/a&gt;。这部分有几点需要说明的是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;下拉浮层的关闭不是瞬间的，而是留有一个定时的余量。这可以很好地应对鼠标指针从替换元素移到下拉浮层的过渡（而不是突然关闭）。&lt;/li&gt;
&lt;li&gt;为了使键盘事件有效，需要在合理的时候调用元素的&lt;code&gt;focus()&lt;/code&gt;方法，获得焦点。&lt;/li&gt;
&lt;li&gt;键盘事件取消默认行为是要阻止上下方向键对垂直滚动条的操作。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;到此，&lt;code&gt;Y.customSelect.one&lt;/code&gt;中保存的方法就实现了自定义外观select。不过，它只能一次处理单个表单select。为了让使用更方便，再增加一点东西。&lt;/p&gt;

&lt;h3&gt;多元素处理&lt;/h3&gt;

&lt;p&gt;新增一个&lt;code&gt;Y.customSelect.all&lt;/code&gt;，它接收多个元素，然后一一对它们调用之前的方法。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;customSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;selectNodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;selectNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;customSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，只需要在页面用简单一句&lt;code&gt;Y.customSelect.all(&quot;select&quot;);&lt;/code&gt;，就可以对页面上存在的所有表单select，全部替换为自定义的版本。&lt;/p&gt;

&lt;h2&gt;实际效果&lt;/h2&gt;

&lt;p&gt;实际效果如下：&lt;/p&gt;

&lt;div class=&quot;post_display&quot;&gt;
    &lt;select name=&quot;anime&quot; class=&quot;m_select&quot; style=&quot;margin-left:10px;&quot;&gt;
        &lt;option&gt;-2014年4月番-&lt;/option&gt;
        &lt;option&gt;艾斯卡与罗吉的工作室&lt;/option&gt;
        &lt;option&gt;Love Live! 第2期&lt;/option&gt;
        &lt;option&gt;漫画家与助手们&lt;/option&gt;
        &lt;option&gt;请问您今天要来点兔子吗&lt;/option&gt;
        &lt;option&gt;漆黑的子弹&lt;/option&gt;
        &lt;option&gt;魔法高校的劣等生&lt;/option&gt;
        &lt;option&gt;萨达四大阿斗&lt;/option&gt;
        &lt;option&gt;网球优等生&lt;/option&gt;
        &lt;option&gt;我们大家的河合庄&lt;/option&gt;
        &lt;option&gt;一周的朋友&lt;/option&gt;
    &lt;/select&gt;
&lt;/div&gt;


&lt;p&gt;为了方便看到关联性，这里没有隐藏原来的select。实际使用时应该隐藏它们。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;表单自定义总的来说还是一件费心思的事，需要不少的代码。不过，我从中也感受到，一个可拆卸的功能是很有用的。实现任何功能，在思路上很值得多琢磨一番。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;本文写到中途时发现代码太多简直不适合现在的节奏&lt;/del&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>处理Webkit硬件加速引发的文字外观变化</title>
   <link href="http://acgtofe.com/posts/2014/02/text-appearance-changes-with-webkit-hardware-compositing-mode-on"/>
   <updated>2014-02-28T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2014/02/text-appearance-changes-with-webkit-hardware-compositing-mode-on</id>
   <content type="html">&lt;p&gt;&lt;em&gt;硬件加速&lt;/em&gt;是Chrome等Webkit浏览器（新的Chrome采用的Blink也是由Webkit发展而来的，为表示方便，后文只用Webkit一词）新引入的渲染模式。&lt;/p&gt;

&lt;p&gt;和传统的软件模式相比，硬件加速会使GPU也参与到渲染工作中（而不是全部交给CPU），因此在大部分情况下，可以较多地提升渲染性能。不过，毕竟在原理上存在差异，硬件加速的渲染模式也可能会带来一些并不希望的变化。&lt;/p&gt;

&lt;h2&gt;意外的文字外观变化&lt;/h2&gt;

&lt;p&gt;下面你可以看到一个小球和一段文字。点击这个小球，然后小球会开始跳动。再随便点击其他的地方，小球会停止。&lt;/p&gt;

&lt;div class=&quot;post_display&quot;&gt;
  &lt;div class=&quot;exhibit_stage&quot;&gt;
      &lt;div class=&quot;exhibit_ball&quot; tabindex=&quot;0&quot;&gt;&lt;/div&gt;
      &lt;div class=&quot;exhibit_text&quot;&gt;Attention! 请注意本段文字的变化&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;请在Webkit浏览器中查看本页。在小球跳动和静止的切换中，认真观察小球后面的一段文字（Webkit浏览器中），你可能还需要放大当前页（&lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;+&lt;/code&gt;）来看到这段文字的外观变化。这个变化是细微的。&lt;/p&gt;

&lt;p&gt;“我看到文字好像是变化了那么一点”，你可能会这样说。是的，这个小小的文字变化，就是一个只在Webkit浏览器发生的问题，而它的引发原因，就和硬件加速的渲染模式有关。&lt;/p&gt;

&lt;h2&gt;发生了什么？&lt;/h2&gt;

&lt;p&gt;请注意，上面的小球，以及随后的文字，都写了&lt;code&gt;position: relative&lt;/code&gt;（没有定义&lt;code&gt;z-index&lt;/code&gt;）。由于小球和文字是同级元素，而文字元素位置更靠后，因此从层叠关系上说，文字是在小球之上的。&lt;/p&gt;

&lt;p&gt;除小球后面的文字之外，本文的其他文字并不会发生变化。层叠关系上说，它们都位于小球之下。&lt;/p&gt;

&lt;p&gt;为什么这样不同的层叠关系就会带来不同的结果呢？这需要从&lt;em&gt;层&lt;/em&gt;（&lt;em&gt;Layer&lt;/em&gt;）的概念说起。&lt;/p&gt;

&lt;h2&gt;层 Layer&lt;/h2&gt;

&lt;p&gt;作为web开发人员，DOM我们很熟悉。不过，浏览器在渲染页面时，实际还用到了很多不可见（也就是不给开发者用）的中间表现形式，其中最重要的就是层。&lt;/p&gt;

&lt;p&gt;与层密切相关的另一个概念叫做&lt;em&gt;backing surface&lt;/em&gt;（后表面，目前没有官方翻译，所以使用英文原词）它是和层关联的。但是，并不是所有层都会有一个属于自己的backing surface，部分层会共用同一个。&lt;/p&gt;

&lt;p&gt;backing surface是一个&lt;em&gt;图形上下文&lt;/em&gt;（&lt;em&gt;graphics context&lt;/em&gt;），用于绘制层。在硬件加速模式下，每个backing surface都会作为一个&lt;em&gt;纹理&lt;/em&gt;（&lt;em&gt;texture&lt;/em&gt;）被传送到GPU，由GPU整合。&lt;/p&gt;

&lt;p&gt;GPU整合到最后的结果是一个完整的图片，即你看到的网页。你可以把backing surface看做一块一块的拼图，如果拼图里的层不发生变化，改变拼图的位置或透明度等操作就可以很简单地由GPU实现，这也就使CPU可以有状态去做更多其他的事情。&lt;/p&gt;

&lt;p&gt;一个拥有自己的backing surface的层，也叫做&lt;em&gt;复合层&lt;/em&gt;（&lt;em&gt;compositing layer&lt;/em&gt;）。打开Webkit开发者工具（以写本文的时间点，Chrome最新版33为例），在控制台的&quot;Rendering&quot;中勾选上&quot;Show composited layer borders&quot;，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201402/show_layers_in_webkit_dev_tools.png&quot; title=&quot;查看复合层&quot; alt=&quot;查看复合层&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后，页面中的复合层会用橙色边框标注出来。比如，前面的小球跳动时，你就可以看到这个小球周围的橙色边框。可以注意到，此时小球后的文字也有橙色边框。当小球停下时，边框则都消失。&lt;/p&gt;

&lt;p&gt;关于层的更多信息，请阅读&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/speed/layers/&quot; title=&quot;Accelerated Rendering in Chrome - The Layer Model&quot;&gt;Accelerated Rendering in Chrome - The Layer Model&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;backing surface判定标准&lt;/h2&gt;

&lt;p&gt;前文说到，部分层会共用同一个backing surface。那么，什么时候浏览器会为一个层创建一个对应的的backing surface呢？具体的判定标准如下（来源于&lt;a href=&quot;http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome&quot; title=&quot;GPU Accelerated Compositing in Chrome&quot;&gt;GPU Accelerated Compositing in Chrome&lt;/a&gt;）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;层拥有3D或透视变换的CSS属性&lt;/li&gt;
&lt;li&gt;层包含使用加速视频解码的&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;元素&lt;/li&gt;
&lt;li&gt;层包含有加速2D上下文或3D（WebGL）上下文的&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;元素&lt;/li&gt;
&lt;li&gt;层包含混合插件，如Flash或Silverlight&lt;/li&gt;
&lt;li&gt;层应用了关于&lt;code&gt;opacity&lt;/code&gt;或&lt;code&gt;transform&lt;/code&gt;的CSS动画&lt;/li&gt;
&lt;li&gt;层应用了加速CSS filters&lt;/li&gt;
&lt;li&gt;层有一个是复合层的子元素，而且层包含需要存在于复合层的内容，比如裁剪和反射（clip or reflection，这条我也理解不能...）&lt;/li&gt;
&lt;li&gt;层有一个兄弟元素（sibling）是复合层，且兄弟元素的z-index较小（换句话说，这个层在一个复合层的上方）&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;现在，再分析一下前面的小球和文字。小球的动画使用了&lt;code&gt;transform&lt;/code&gt;的&lt;code&gt;translate&lt;/code&gt;，因此小球的层会有自己的backing surface（第5条）。文字和小球是兄弟元素，且文字在上，所以文字的层也需要有自己的backing surface（最后1条）。&lt;/p&gt;

&lt;p&gt;拥有自己的backing surface意味着会被单独作为一个纹理绘制，文字在这种时候，其外观就会发生变化。&lt;/p&gt;

&lt;h2&gt;解决文字问题&lt;/h2&gt;

&lt;p&gt;现在可以知道，文字外观变化是因为意外地创建了文字层的backing surface。所以，更改层叠关系，让文字层位于小球层的下方即可。例如，为小球元素增加一个&lt;code&gt;z-index: 50&lt;/code&gt;，然后就可以看到无论小球跳动与否，文字都不会变化。&lt;/p&gt;

&lt;p&gt;如果以后有碰到类似的问题，请记住：&lt;strong&gt;让那些有可能有自己的backing surface的元素，摆放在其他普通元素的上边&lt;/strong&gt;。你也可以理解为：在舞台上，让那些有丰富动作的主角（有特别动画的你还不主角么）站在最前边！&lt;/p&gt;

&lt;h2&gt;附加内容&lt;/h2&gt;

&lt;p&gt;问题处理到此结束，不过，由这个问题还可以引出其他的一些内容。&lt;/p&gt;

&lt;h3&gt;文字平滑&lt;/h3&gt;

&lt;p&gt;在本文的问题中，文字的细微变化到底是什么呢？这个变化实际是文字平滑处理的变化。这里有一个新的概念：&lt;em&gt;subpixel rendering&lt;/em&gt;（&lt;em&gt;亚像素渲染&lt;/em&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Subpixel_rendering&quot; title=&quot;Subpixel rendering - Wikipedia, the free encyclopedia&quot;&gt;Wiki上用了很长的篇幅&lt;/a&gt;解释了subpixel rendering。你可能不太有兴致读下去，所以我在这里简单地解释一下。我们知道，显示屏幕是以像素为单位来显示内容的，但每一个像素又是由更小的人眼无法分辨的多个颜色单元组成，例如最常见的RGB，即红绿蓝三原色。这些更小的显示单元，就称为亚像素。subpixel rendering是一种显示处理方法，它通过有效地结合使用这些更小的亚像素，可以平滑文字主体，锐化文字边缘，使文字看起来分辨率更高（对，只是看起来），更清晰，也因此具有更好的可读性。各类浏览器对文字默认都有这种处理。&lt;/p&gt;

&lt;p&gt;在Webkit浏览器中，如果文字层有了自己的backing surface，文字平滑的处理方法就会发生变化，因此文字外观会有细微改变。&lt;/p&gt;

&lt;p&gt;有趣的是，Webkit浏览器曾支持一个修改文字平滑处理模式的css属性&lt;code&gt;-webkit-font-smoothing&lt;/code&gt;。它有3个值，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-webkit-font-smoothing: none;
-webkit-font-smoothing: subpixel-antialiased; // 默认
-webkit-font-smoothing: antialiased;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以在&lt;a href=&quot;http://maxvoltar.com/archive/-webkit-font-smoothing&quot; title=&quot;maxvoltar - -webkit-font-smoothing&quot;&gt;-webkit-font-smoothing&lt;/a&gt;一文中看到它们各自的效果。后两种抗锯齿的平滑处理模式的区别是，&lt;code&gt;subpixel-antialiased&lt;/code&gt;即一般的subpixel rendering，而&lt;code&gt;antialiased&lt;/code&gt;会禁用subpixel rendering，重新在像素级别对文字进行平滑处理。注意，&lt;code&gt;subpixel-antialiased&lt;/code&gt;使用的是亚像素，比&lt;code&gt;antialiased&lt;/code&gt;更为精细。&lt;/p&gt;

&lt;p&gt;文字平滑是肯定需要的，不过用哪一种更好呢？Dmitry Fadeyev在&lt;a href=&quot;http://www.usabilitypost.com/2012/11/05/stop-fixing-font-smoothing/&quot; title=&quot;Please Stop &amp;quot;Fixing&amp;quot; Font Smoothing&quot;&gt;Please Stop &quot;Fixing&quot; Font Smoothing&lt;/a&gt;一文中详细探讨了这个问题。结论是，请不要因为有这么一个属性让你可以改掉默认的平滑，就一定要去用。为了文字的可读性，默认值仍然是最合适的。&lt;/p&gt;

&lt;p&gt;这个属性在新版的Chrome中已经不再有效（可参考&lt;a href=&quot;http://stackoverflow.com/questions/18786829/webkit-font-smoothing-property-has-no-effect-in-chrome&quot; title=&quot;css - -webkit-font-smoothing property has no effect in Chrome - Stack Overflow&quot;&gt;stackoverflow上的提问&lt;/a&gt;，我也自己做过测试），也许是Chrome团队也赞同应该保持默认的subpixel rendering。&lt;/p&gt;

&lt;h3&gt;有关translate3d的性能提升技巧&lt;/h3&gt;

&lt;p&gt;硬件加速的渲染模式的确为Webkit浏览器带来了更好的性能，因此，出现了一个有趣的帮助提升性能的技巧（应该叫做hack）。最常使用的两种代码是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-webkit-transform: translateZ(0); // one
-webkit-transform: translate3d(0,0,0); // another
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它们之中任选一种即可。可以看出，当应用在页面元素上后，页面元素实际上不会有任何改变（因为数值是0），但是，联系前文，就可以知道这里的代码会有两个作用。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;启动浏览器的硬件加速模式，如果浏览器支持它，而且还没有启动。&lt;/li&gt;
&lt;li&gt;为该元素所在的层创建一个属于它的backing surface。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;这就是这个曾经被多次提到的技巧的原理。&lt;/p&gt;

&lt;p&gt;你已经知道硬件加速模式也可能引发一些问题，所以，这个技巧在使用时，也请多加注意。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;前一段时间在写网页动画效果时，注意到了Chrome中独特的元素外观变化，觉得很意外。在搜集资料寻求解答的过程中，我找到了&lt;a href=&quot;http://jsbin.com/efirip/5/quiet&quot; title=&quot;Accidental layer creation&quot;&gt;Accidental layer creation&lt;/a&gt;这篇简短而精致的文章。本文大概就是在结合了Webkit硬件加速知识点后，对它的一点扩展。&lt;/p&gt;

&lt;p&gt;是不是应该庆祝一下能解决这令人不快的文字问题？（笑）&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>徜徉在自然风景中—「悠哉日常大王」的乡村生活</title>
   <link href="http://acgtofe.com/posts/2014/01/non-non-biyori"/>
   <updated>2014-01-21T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2014/01/non-non-biyori</id>
   <content type="html">&lt;p&gt;到处都是翠绿色的风景。一个小学生模样的小孩演奏着不太明朗的竖笛声，缓缓地走着。“这里就是我的村子，是个悠闲的地方。但是，我有时候会想，莫非我...”身后一声熟悉的招呼，小孩停下了竖笛，转过身来，目光却集中在了好友身后的一头正在横过马路的牛。小孩突然得到了感悟，“莫非我住的地方是乡下？”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201401/nyanpass_bg_1.jpg&quot; title=&quot;风景-春&quot; alt=&quot;风景-春&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个小孩，宫内莲华，就这样对自己的村子有着些许的疑惑。（为什么会有这样的疑惑啊！？）&lt;/p&gt;

&lt;h2&gt;关于乡下的辩论&lt;/h2&gt;

&lt;p&gt;如果住在乡下的人想要拿出证据来说明这里算不上“乡下”的话？&lt;/p&gt;

&lt;p&gt;刚从东京来到这个村子的小学五年级生一条萤，转入到这里的乡下学校-“旭丘分校”，却惊奇地发现，全校学生只有4个人，大家集结在1个班里，年级从小学一年级到初中三年级，各不相同。加上新来的自己，才算有5个人。由于年级各不相同，上课基本是自习。&lt;/p&gt;

&lt;p&gt;村里各家都不锁门，甚至钥匙这个东西都不为人所见。刚到这里的萤，还因为带了一串钥匙被大家感慨“好奇怪啊”。&lt;/p&gt;

&lt;p&gt;这里没有便利店，没有书店，像商店的东西似乎就一家零食店，而且还同时卖着其他各种杂货。&lt;/p&gt;

&lt;p&gt;牛、鹿、野猪、狸猫都可以在这里出现。&lt;/p&gt;

&lt;p&gt;在这里，开车时速50公里，1小时后可以刚好到50公里外的地方（顺带解释一下，一般会因为有红绿灯，而做不到这点的）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201401/nyanpass_bg_2.jpg&quot; title=&quot;风景-夏&quot; alt=&quot;风景-夏&quot; /&gt;&lt;/p&gt;

&lt;p&gt;尽管有以上种种的事实，却仍有一个坚持的声音：“如果说不方便到什么都做不了的程度，就算是乡下的话。尽管这里有牛，有狸猫，但完全没有感觉不方便啊！所以，这里不是乡下的！”（喂，这种想法本身就足够“乡下”了啊！）&lt;/p&gt;

&lt;p&gt;很遗憾，这样坚持的声音也没有持续多久。当大家错过一班公交车，重新确认到下一班车要2小时后的时候，才又一次恍然大悟：“果然好不方便啊！”（只有这种时候....）&lt;/p&gt;

&lt;h2&gt;可以有这样的经历吗&lt;/h2&gt;

&lt;p&gt;如果你坐过新干线，在这里就足够显摆一下这种大都市的经历。如果你坐过飞机，那你简直会受到大家更深层次的敬仰和羡慕，大家对飞机的好奇就可以让你说上好一阵子了。（请注意，虽然很了不起，但新干线还是会被飞机完虐的，这就是级别啊...）&lt;/p&gt;

&lt;p&gt;见过没有售货员的蔬菜店吗？新鲜的蔬菜，自己付钱，然后自己拿走。这样的店就已经是这里的“便利店”了。&lt;/p&gt;

&lt;p&gt;偶然和家里赌气离家出走，就很快可以想到自己还有一个可以待着的秘密基地。明明好久不用，这一次来看却又是熟悉的样子，还有着自己上次离家出走的涂鸦。说起来，上一次最后是怎么决定回去的呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201401/nyanpass_bg_3.jpg&quot; title=&quot;风景-秋&quot; alt=&quot;风景-秋&quot; /&gt;&lt;/p&gt;

&lt;p&gt;秋天，有点艺术的感觉最棒了。带点画笔和画纸，和好友一起到树林里写生。累了，靠着树，在层层叠叠的落叶中坐下，就可以好好地休息一会儿。&lt;/p&gt;

&lt;p&gt;晴天的夜晚，可以看到非常靓丽的星空。天空很深邃，却因为闪亮的繁星，感觉离自己很近，似乎举起双手，就可以碰得到整个星空。&lt;/p&gt;

&lt;p&gt;可以采各种各样的野菜，有的野菜用途广泛，做菜，做年糕，制茶，具体要用来做什么还真是需要烦恼一番呢。另外，如果不是一直生活在这里，亲眼所见，可是很难分辨出什么是野菜的。（这就是乡下经验的价值！）&lt;/p&gt;

&lt;h2&gt;人物&lt;/h2&gt;

&lt;p&gt;宫内莲华在主角4人中年龄最小，只是一名小学一年级生。也许是年龄的缘故，莲华和大家的感性认知有很大不同。同时，也和这个年龄阶段的小孩一样，莲华对许多事物都充满好奇，无论什么都想试试。莲华有和大家不同频道的想象力，一直很电波地用“喵~帕斯”（にゃんぱすー，大致读作nyan~pass）问好。说话有时候给人一种很经过思考的感觉，但实际上含义很单纯，充满童真的乐趣。&lt;/p&gt;

&lt;p&gt;初中一年级的越谷夏海给人一种非常活泼的感觉，常常是各种话题的发起者，很喜欢恶作剧，尤其是自己的姐姐小鞠。不太热心学习，很贪玩，算是让母亲最无可奈何的一个。虽然对某些方面有着意外丰富的知识，但往往对自己的能力过于自信，以至于发生自己计划之外的事（请叫做 zuo si ）。
&lt;img src=&quot;/assets/used-images/posts/201401/nyanpass_bg_4.jpg&quot; title=&quot;风景-冬&quot; alt=&quot;风景-冬&quot; /&gt;&lt;/p&gt;

&lt;p&gt;越谷小鞠是夏海的姐姐，相对说来要乖巧很多。很特别的一点是，明明已经初中二年级，身为全校学生中的“学姐”，却从体型到性格都非常地像小孩。同时，小鞠憧憬成熟女性的魅力，因此常常会刻意地装作一个可靠的大人（这里就交给姐姐我吧！），但实际上修为严重不足，因此不管怎么看...都显得非常可爱！&lt;/p&gt;

&lt;p&gt;一条莹虽然只是小学五年级生，但身高体型上已经超前了许多。作为城里来的孩子，莹对城市里的各种东西都很了解，而且在少女向的兴趣和知识上都要丰富和有经验的多（作为对比，就是学姐了！）。对可爱的东西没有抵抗力，非常地喜欢“娇小”的学姐小鞠。莹刚来的时候还对这里充满着疑惑，但很快就适应了这里的生活，并发自内心地喜欢这个地方。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201401/nyanpass_ed_cover.jpg&quot; title=&quot;ED封面里的4人&quot; alt=&quot;ED封面里的4人&quot; /&gt;&lt;/p&gt;

&lt;p&gt;主角4人之外，是不是全校学生5人的话，应该还有一个？是的，这位就是全场存在感稀薄，声优写作？？？读作mei you的小哥（大家都这么叫）。小哥是前面的越谷两姐妹的哥哥，虽然话不多（根本就没有台词吧！），但总是精准地出现在每一个需要群众演员的画面，无缝地和主角们的故事擦肩而过。不知道这里是否要引用泰戈尔的一句诗：“天空中没有翅膀的痕迹，而我已经飞过”。（小哥：...）&lt;/p&gt;

&lt;h2&gt;风景和喵帕斯&lt;/h2&gt;

&lt;p&gt;动画中精湛的背景作画，有许多都值得细细欣赏。这些，都是呈现在眼前的可以想见的乡间风景。&lt;/p&gt;

&lt;p&gt;春夏秋冬，一年间，乡间的日常就这样静静地流淌过去。在这样悠闲的地方生活，感觉如何呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201401/nyanpass_title.jpg&quot; title=&quot;のんのんびより&quot; alt=&quot;のんのんびより&quot; /&gt;&lt;/p&gt;

&lt;p&gt;生活有时候并不需要答案。静静地去感悟已足够，而不必用再词汇去描述。留一些未知的东西，为一份偶遇的惊喜。&lt;/p&gt;

&lt;p&gt;很喜欢ED里的歌词“天空与地面离得很远，人与人却离得很近”。希望每一天清晨，都能精神地向新一天的生活问候一声：“喵帕斯！”&lt;/p&gt;

&lt;p&gt;（附上自己临摹的喵帕斯↓）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201401/nyanpass_draw.jpg&quot; title=&quot;にゃんぱすー&quot; alt=&quot;にゃんぱすー&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;（附：悠哉日常大王，日文原名のんのんびより，原是日本漫画家ATTO的漫画作品，动画公司SILVER LINK.将其改编为了动画，是2013年10月番，一共12集）&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>以实测结果推断表格的布局计算原理</title>
   <link href="http://acgtofe.com/posts/2013/12/how-do-tables-calculate-their-layout"/>
   <updated>2013-12-29T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/12/how-do-tables-calculate-their-layout</id>
   <content type="html">&lt;h2&gt;什么时候会用到表格&lt;/h2&gt;

&lt;p&gt;现在，表格&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;一般不再用于网页整体的布局。不过，在面对某些特定的设计，如表单输入、数据呈现时，表格则可能是最恰当的选择。&lt;/p&gt;

&lt;p&gt;关于表格的直观印象，就是由多个单元格（cell）整齐排列而成的元素，可以明确看出行（row）和列（column）。这可以联想到Excel，由Excel在数据处理和统计上的地位，就可以理解网页中表格的意义。&lt;/p&gt;

&lt;p&gt;简单来说，能直观感受到多个元素是以行和列的概念排列时，用表格会让你轻松很多。如&lt;a href=&quot;http://caniuse.com/#feat=audio&quot; title=&quot;caniuse.com&quot;&gt;caniuse.com&lt;/a&gt;中应用表格的例子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201312/caniuse_table_example.png&quot; title=&quot;caniuse中的表格&quot; alt=&quot;caniuse中的表格&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;表格布局计算&lt;/h2&gt;

&lt;p&gt;使用表格很简单，但有时候表格最终为每一个格子呈现的状态，可能不是你想要的。比如说某些格子出现了换行，然后整个表格就因为换行看起来十分不美观。尤其是用于数据呈现的表格，宽度分配是一个很重要的话题，你可能需要为每一列格子可能呈现的数据情况，对表格的总宽度做精打细算。&lt;/p&gt;

&lt;p&gt;这是因为，表格在布局上有自己的特性，它会遵循一定的原理，通过计算，确定出它的实际布局。接下来，本文以实际的表格测试示例，探讨表格是如何计算自己的布局的。&lt;/p&gt;

&lt;h3&gt;初始声明&lt;/h3&gt;

&lt;p&gt;本文只针对应用表格最常见的方法，而不会列出所有的情况。不同浏览器对表格的部分概念的解析有差异，但布局计算是基本一致的（如果有差异，会单独提及）。&lt;/p&gt;

&lt;p&gt;接下来用的测试表格都会以这样的外观呈现（内容取自零之轨迹）：&lt;/p&gt;

&lt;div class=&quot;post_display&quot;&gt;
    &lt;table class=&quot;exhibit_table&quot;&gt;
        &lt;tr&gt;
            &lt;th&gt;姓名&lt;/th&gt;
            &lt;th&gt;年龄&lt;/th&gt;
            &lt;th&gt;惯用武器&lt;/th&gt;
            &lt;th&gt;简介&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;罗伊德·班宁斯&lt;/td&gt;
            &lt;td&gt;18&lt;/td&gt;
            &lt;td&gt;旋棍&lt;/td&gt;
            &lt;td&gt;隶属于克洛斯贝尔警察局的新人搜查官&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;艾莉·麦克道尔&lt;/td&gt;
            &lt;td&gt;18&lt;/td&gt;
            &lt;td&gt;导力枪&lt;/td&gt;
            &lt;td&gt;克洛斯贝尔自治州市长麦克道尔的孙女&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;缇欧·普拉托&lt;/td&gt;
            &lt;td&gt;14&lt;/td&gt;
            &lt;td&gt;魔导杖&lt;/td&gt;
            &lt;td&gt;隶属于“爱普斯坦因财团”财团的少女&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;兰迪·奥兰多&lt;/td&gt;
            &lt;td&gt;21&lt;/td&gt;
            &lt;td&gt;战斧&lt;/td&gt;
            &lt;td&gt;被转到警察单位的原克洛斯贝尔警备队队员&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;


&lt;p&gt;同时，表格都会设置&lt;code&gt;border-collapse:collapse;&lt;/code&gt;和&lt;code&gt;border-spacing:0;&lt;/code&gt;。这也是应用表格的最常用做法，&lt;a href=&quot;http://necolas.github.io/normalize.css/&quot; title=&quot;Normalize.css&quot;&gt;Normalize.css&lt;/a&gt;把这部分用作了初始化定义。&lt;/p&gt;

&lt;h3&gt;两种算法&lt;/h3&gt;

&lt;p&gt;定义在&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;元素上的css属性&lt;code&gt;table-layout&lt;/code&gt;，将决定表格在布局计算时应用的算法。它有两种值，&lt;code&gt;auto&lt;/code&gt;和&lt;code&gt;fixed&lt;/code&gt;。在通常情况下，都使用默认值&lt;code&gt;auto&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这两种算法的差异在于表格的宽度布局是否与表格中的数据内容有关。本文会分别讨论在这两种取值时，表格的布局计算原理。&lt;/p&gt;

&lt;h3&gt;自动表格布局-auto&lt;/h3&gt;

&lt;p&gt;自动表格布局的特点是，表格的宽度布局与表格中的所有数据内容有关，它需要在获取所有表格内容后才能确定最终的宽度布局，然后再一起显示出来。&lt;/p&gt;

&lt;p&gt;如此看来，要点就是“内容相关”了。如果表格定义了固定宽度（这里是500px），而所有的单元格都不定义宽度（只讨论css定义宽度），会如何呢？来看结果：&lt;/p&gt;

&lt;div class=&quot;post_display&quot;&gt;
    &lt;table class=&quot;exhibit_table&quot;&gt;
        &lt;tr&gt;
            &lt;th&gt;字段1&lt;/th&gt;
            &lt;th&gt;字段2&lt;/th&gt;
            &lt;th&gt;字段3&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;一二三四五六七八&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td&gt;一二三四&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;none&lt;/td&gt;
            &lt;td&gt;一二三四&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;


&lt;p&gt;上面这个表格中，空白的部分是写了&lt;code&gt;&amp;amp;nbsp;&lt;/code&gt;空格。经过比较，可以发现以下几点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第2列和第3列宽度相同。&lt;/li&gt;
&lt;li&gt;第1列的宽度和后面任意一列的宽度比似乎是2:1。&lt;/li&gt;
&lt;li&gt;加上边框和内边距，所有列的宽度总合，等于表格定义的宽度。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;每个单元格都没有定义宽度，所以宽度布局完全由具体的内容数据（文本信息）决定的。如何解释这样的结果呢？可以先直观地推测这样的逻辑：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第1步，从每一列中选取文字内容最多（理解为不换行的情况下，文本所占据的宽度最宽）的，作为“代表”。&lt;/li&gt;
&lt;li&gt;第2步，比较各列的“代表”的宽度，然后按照它们的宽度比例关系，为它们分配表格的总宽度，包括边框和内边距。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;参照上面的逻辑，再来反观一下前面的表格，是不是挺有一些道理？注意，前面说宽度比“似乎”是2:1，这个会是？来看看去掉内边距的版本：&lt;/p&gt;

&lt;div class=&quot;post_display&quot;&gt;
    &lt;table class=&quot;exhibit_table exhibit_table_with_no_padding&quot;&gt;
        &lt;tr&gt;
            &lt;th&gt;字段1&lt;/th&gt;
            &lt;th&gt;字段2&lt;/th&gt;
            &lt;th&gt;字段3&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;一二三四五六七八&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td&gt;一二三四&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;none&lt;/td&gt;
            &lt;td&gt;一二三四&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;


&lt;p&gt;用前端调试工具具体看一下上面的单元格的宽度，你会发现这个表格和之前不同，比例已经非常接近2:1（是的，还有的这一小点是因为边框，但是没有边框就没法区分列了）。&lt;/p&gt;

&lt;p&gt;可见，&lt;em&gt;在分析宽度比例关系的时候，是会把内容宽度和内边距，以及边框都考虑在内的&lt;/em&gt;。这也说明，&lt;em&gt;不是衡量文字的数目，而是衡量文字在不换行状态所能占据的宽度&lt;/em&gt;（这里的2:1来源于中文汉字是等宽的）。使用内边距自然只是为了做出更美观的表格 :) 。&lt;/p&gt;

&lt;p&gt;有宽度定义的时候，又会怎样呢？下面是一个部分单元格有宽度定义的表格：&lt;/p&gt;

&lt;div class=&quot;post_display&quot;&gt;
    &lt;table class=&quot;exhibit_table&quot;&gt;
        &lt;tr&gt;
            &lt;th&gt;一二&lt;/th&gt;
            &lt;th style=&quot;width:200px;&quot;&gt;&amp;nbsp;&lt;/th&gt;
            &lt;th&gt;&amp;nbsp;&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;width:5px;&quot;&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td&gt;&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td style=&quot;width:70px;&quot;&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td&gt;一二三四&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;


&lt;p&gt;它的对应html代码是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;exhibit_table&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;一二&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width:200px;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width:5px;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width:70px;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;一二三四&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面这个表格可以发现以下几点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;宽度定为5px的单元格，实际呈现宽度是13px，这正好是单个汉字的宽度，同一列的有汉字的单元格则以最小单元格宽度的形式排列文字（所以，换行了）。&lt;/li&gt;
&lt;li&gt;宽度定为200px的单元格，实际呈现宽度是200px，尽管同列还有一个宽度70px的定义。&lt;/li&gt;
&lt;li&gt;没有确切宽度定义的第3列，最后得到了表格在分配完第1列和第2列后全部的剩余宽度。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;对此的推断是，存在宽度定义和不存在宽度定义的列都有的情况时：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果单元格定义宽度小于其内容的最小排列宽度（和不换行排列方式相反，尽可能多行排列在单元格内时，单元格所需的宽度），则该单元格所在的列，都会以最小排列方式呈现内容。&lt;/li&gt;
&lt;li&gt;如果同一列中，单元格的内容宽度（不换行形式，后文这个词都是这个意思）小于该列中最大的宽度定义，则该列的实际宽度等于该宽度定义。&lt;/li&gt;
&lt;li&gt;不存在宽度定义的列，会先由表格分配宽度给有宽度定义的列之后，再分配给它们（同样，它们之间的比例取决于内容宽度）。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;最前边的没有宽度定义的可以看做情况1，这里有的列有宽度定义，有的又没有，可以看做情况2。下面是情况3，即所有的列都有宽度定义时：&lt;/p&gt;

&lt;div class=&quot;post_display&quot;&gt;
    &lt;table class=&quot;exhibit_table exhibit_table_with_no_padding&quot;&gt;
        &lt;tr&gt;
            &lt;th style=&quot;width:50px;&quot;&gt;&amp;nbsp;&lt;/th&gt;
            &lt;th style=&quot;width:50px;&quot;&gt;&amp;nbsp;&lt;/th&gt;
            &lt;th style=&quot;width:100px;&quot;&gt;&amp;nbsp;&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;


&lt;p&gt;对应html代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;exhibit_table exhibit_table_with_no_padding&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width:50px;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width:50px;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width:100px;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的表格中，去掉了内边距，因此可以清晰地由宽度定义值，得到这3列的宽度比例是2:1:1。这里还有一个条件，就是单元格内的内容宽度不超过宽度定义值。经过测试，IE7及以下在内容超过宽度定义值和其他浏览器表现不同。&lt;/p&gt;

&lt;p&gt;从这个表格例子可以知道，如果所有的列都有宽度定义，而这些宽度定义的值的和小于表格的宽度，则表格会在分配完它们宽度定义值所对应的宽度后，继续把剩余宽度，按照它们的宽度比例，也分配给它们。&lt;/p&gt;

&lt;p&gt;以上即是对自动表格布局，且表格本身是定义了固定宽度时，3种情况的分析。如果表格本身不定义宽度，还会有更多情况，而且会和表格的包含块（containing block，&lt;a href=&quot;http://www.w3help.org/zh-cn/kb/008/&quot; title=&quot;containing block&quot;&gt;详情&lt;/a&gt;）有关，如果以后有合适机会，再做讨论（所谓文章篇幅有限...）。&lt;/p&gt;

&lt;h3&gt;固定表格布局-fixed&lt;/h3&gt;

&lt;p&gt;固定表格布局的特点是，表格的宽度布局和表格中的数据内容无关，只需要接收到表格第一行的信息，就可以确定最终的宽度布局，并开始显示。&lt;/p&gt;

&lt;p&gt;固定表格布局是“内容无关”的，而且它强调“第一行”。请看下面这个表格示例：&lt;/p&gt;

&lt;div class=&quot;post_display&quot;&gt;
    &lt;table class=&quot;exhibit_table exhibit_table_fixed&quot;&gt;
        &lt;tr&gt;
            &lt;th style=&quot;width:50px;&quot;&gt;&lt;/th&gt;
            &lt;th&gt;一二&lt;/th&gt;
            &lt;th&gt;一二三四&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;艾丝蒂尔·布莱特&lt;/td&gt;
            &lt;td width=&quot;1000px;&quot;&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;width:5px;&quot;&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;td&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;


&lt;p&gt;对应html代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;exhibit_table exhibit_table_fixed&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width:50px;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;一二&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&amp;gt;&lt;/span&gt;一二三四&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;艾丝蒂尔·布莱特&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1000px;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width:5px;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;固定表格布局的逻辑要简单很多，表述如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;只取第一行的信息，无视第一行之后的所有单元格的内容，及宽度定义&lt;/li&gt;
&lt;li&gt;在第一行中，如果单元格有宽度定义，则先分配它们所需的宽度，然后剩余的宽度平均分配给没有宽度定义的单元格&lt;/li&gt;
&lt;li&gt;第一行的单元格的宽度分配将决定表格的宽度布局，第一行之后的内容不会再改变布局。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;还需要注意的时候，使用固定表格布局，则一定要给表格元素定义宽度，如果它的宽度没有定义（也就是&lt;code&gt;auto&lt;/code&gt;默认值），浏览器会改用自动表格布局。&lt;/p&gt;

&lt;h3&gt;结尾声明&lt;/h3&gt;

&lt;p&gt;与表格有关的其实还有&lt;code&gt;&amp;lt;colgroup&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;tfoot&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;caption&amp;gt;&lt;/code&gt;等元素，只是在最常见的用法中，并不需要用到它们。实际上，它们也在表格的布局计算的考虑之内。再加上还有单元格合并的情况，你大概可以想象到表格布局计算其实是多么复杂的东西。&lt;/p&gt;

&lt;p&gt;W3C的文档提到，表格的布局计算（自动表格布局）尚没有成为规范。关于W3C对表格布局计算的说明，请参照&lt;a href=&quot;http://www.w3.org/TR/CSS21/tables.html#width-layout&quot; title=&quot;Table width algorithms&quot;&gt;Table width algorithms&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;其实就表格布局计算原理这一点，做这样细致的推断，并没有多少实用性。只是说，在需要解决细节问题的时候，有这些信息做参考的话，会有所帮助，尽管这样的机会不多。&lt;/p&gt;

&lt;p&gt;不过，可以就本文的内容，得到一个比较有意义的结论：表格定义宽度，且所有单元格都不定义宽度，那么自动布局的表格会尽可能让你的所有数据都不换行，而如果碰到换行影响美观的情况，说明必须要精简数据或者减小边距，&lt;em&gt;而不是再自行尝试重做宽度分配&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;这一次做这种实测和推断，感到针对具体情况细分后再说明，会比一次性系统地完整表述，更容易理解，也许算是语文练习？&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>从jQuery分析隐藏元素的尺寸获取方法</title>
   <link href="http://acgtofe.com/posts/2013/11/getting-the-dimension-of-a-hidden-element"/>
   <updated>2013-11-17T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/11/getting-the-dimension-of-a-hidden-element</id>
   <content type="html">&lt;h2&gt;元素显示动画的疑点&lt;/h2&gt;

&lt;p&gt;曾经想要做这样的一个效果：鼠标点击某一处后，另一处的原本为隐藏（即&lt;code&gt;display&lt;/code&gt;为&lt;code&gt;none&lt;/code&gt;）的元素，以一个平滑的动画效果，从高度0开始，渐渐完整显示出来。就像下边这样：&lt;/p&gt;

&lt;div class=&quot;post_display&quot; style=&quot;height:70px;&quot;&gt;
    &lt;div id=&quot;demo-hidden&quot; style=&quot;display:none;background:#&quot;&gt;这是原本隐藏着的文字！((っ･ω･)っ&lt;/div&gt;
    &lt;div style=&quot;padding-top:10px;&quot;&gt;&lt;a id=&quot;demo-show-link&quot; href=&quot;javascript:;&quot; title=&quot;&quot; style=&quot;display:inline-block;padding:4px 10px;background:#34495e;color:#fff;&quot;&gt;点击我&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;但是，参照一般的动画API（自己写的，或使用现有的javascript库的）的用法，会觉得一定要指定对应的属性值。比如MooTools的动画API的语法是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myElement.tween(property, startValue[, endValue]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;startValue&lt;/code&gt;和&lt;code&gt;endValue&lt;/code&gt;代表的分别是属性在动画执行前后的值，也就是初始值和结束值。其中结束值对于一个动画来说是必须的（在上面的API中，如果不指定endValue，startValue会被作为endValue使用）。现在，重新考虑一下刚才说的隐藏的元素，既然要为这个元素添加一个高度渐显动画，似乎这个元素在正常显示状态时的高度就是必须知道的了。有了这个数值，就可以调用动画API为其添加显示动画了。&lt;/p&gt;

&lt;p&gt;好了，需要知道高度，那获取即可。最为常用的元素尺寸获取相关的属性是&lt;code&gt;offsetWidth&lt;/code&gt;和&lt;code&gt;offsetHeight&lt;/code&gt;，但是，你也许知道，&lt;em&gt;在&lt;code&gt;display&lt;/code&gt;设置为&lt;code&gt;none&lt;/code&gt;的情况下，获取元素尺寸值得到的会是0&lt;/em&gt;。所以，必须寻求对应的解决方法。&lt;/p&gt;

&lt;h2&gt;有些相关的jQuery的.show()方法&lt;/h2&gt;

&lt;p&gt;我在考虑这个解决方法的时候，回想起了jQuery中的&lt;code&gt;.show()&lt;/code&gt;方法。这个方法的功能就是让隐藏的元素显示出来，但有趣的是，这个方法可以接受参数，比如指定&lt;code&gt;.show(500)&lt;/code&gt;，元素会以一个500ms的动画完成显示过程，这期间，宽度、高度、透明度等属性都是平滑过渡的，这不就非常类似我想要做的效果么？&lt;/p&gt;

&lt;p&gt;jQuery既然做到了，那么jQuery里的具体实现方法将会是一个非常有用的参考。&lt;/p&gt;

&lt;h2&gt;源码分析&lt;/h2&gt;

&lt;p&gt;首先，直观一点地想，jQuery的&lt;code&gt;.show()&lt;/code&gt;方法，在给定时间参数后，可以推断是调用了jQuery的动画API，也就是&lt;code&gt;.animate()&lt;/code&gt;来完成动画的。在写本文的时间点，jQuery的最新版是jQuery-1.10.2，以它的源码为基础，可以简单分析一下。&lt;/p&gt;

&lt;p&gt;首先是源头：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;toggle&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;show&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hide&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cssFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;easing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;boolean&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;cssFn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;genFx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;easing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从这里可以看到，和推断相同，&lt;code&gt;.show()&lt;/code&gt;方法对第一个参数&lt;code&gt;speed&lt;/code&gt;做了判断，当&lt;code&gt;speed&lt;/code&gt;不为空，且不为逻辑值时，执行&lt;code&gt;.animate()&lt;/code&gt;方法。传给&lt;code&gt;.animate()&lt;/code&gt;方法的第一个参数是通过函数&lt;code&gt;genFx()&lt;/code&gt;得到的，这个函数在源码中可以找到定义，如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Generate parameters to create a standard animation&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;genFx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;includeWidth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// if we include width, step value is 1 to do all cssExpand values,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// if we don&amp;#39;t include width, step value is 2 to skip over Left and Right&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;includeWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;includeWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;includeWidth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cssExpand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;margin&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;padding&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;includeWidth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个&lt;code&gt;genFx()&lt;/code&gt;如其中的注释所说，用于生成标准动画参数。我做了测试，在调用&lt;code&gt;.show(500)&lt;/code&gt;方法后，这个函数返回的结果值是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201311/result_of_genFx.png&quot; title=&quot;genFx()的返回值&quot; alt=&quot;genFx()的返回值&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可见，实质上，确实是调用了jQuery的&lt;code&gt;.animate()&lt;/code&gt;方法来实现了动画效果。...等下，数值竟然可以是&quot;show&quot;这种不着边际的值？我果断重新查看了jQuery的文档，原来在jQuery的&lt;code&gt;.animate()&lt;/code&gt;方法中，确实可以指定这样的值，而且，如名字所示，&quot;show&quot;用作动画参数属性值时，就代表元素在正常显示时候的对应数值。&lt;/p&gt;

&lt;p&gt;看来，获取隐藏元素的尺寸的方法，似乎隐藏在&lt;code&gt;.animate()&lt;/code&gt;的方法定义中。然后，我经过反复调试和分析这部分代码，得到了jQuery对于隐藏元素的动画的做法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当元素是隐藏状态，且有任意动画终点属性值为&quot;show&quot;时，先调用元素无参数的&lt;code&gt;.show()&lt;/code&gt;方法，让元素不再隐藏。&lt;/li&gt;
&lt;li&gt;获取此时处于正常显示状态的相关属性值，并将这些属性值作为动画的终点属性值。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;也就是说，其实jQuery对隐藏元素做动画，且动画最终会让元素显示出来时，jQuery的做法就是在一开始就让元素不再隐藏，然后立即进行动画。由于不再隐藏的元素是可以获取宽高的，而且动画是随后立即进行的，所以仍然看到的是一个平滑的显示动画效果。&lt;/p&gt;

&lt;h2&gt;历史上的问题&lt;/h2&gt;

&lt;p&gt;等下！到这里，还是没有解决最初的问题吧？对的，其实在很早的时候，就有人问到过&lt;a href=&quot;http://stackoverflow.com/questions/1472303/jquery-get-width-of-element-when-not-visible-display-none&quot; title=&quot;jQuery - Get Width of Element when Not Visible (Display: None) - Stack Overflow&quot;&gt;使用jQuery获取隐藏元素的尺寸的问题&lt;/a&gt;，提问题的这个人使用了当时的jQuery的&lt;code&gt;.width()&lt;/code&gt;方法，发现无法获取隐藏元素的宽度。下面的最佳答案的回复者Tim Banks给了一个类似hack的处理方法，漂亮地解决了这个问题。Tim Banks后来还专门为此写了一篇博文（&lt;a href=&quot;http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/&quot; title=&quot;Getting the width of a hidden element with jQuery using width()&quot;&gt;详情&lt;/a&gt;）。有趣的是，jQuery从1.4.4版本开始，支持了对隐藏元素的尺寸获取，而且使用的正是这位Tim Banks的方法。&lt;/p&gt;

&lt;p&gt;如果你现在试一试新版jQuery的&lt;code&gt;.width()&lt;/code&gt;和&lt;code&gt;.height()&lt;/code&gt;，你会发现即使是隐藏的元素，它也会给你返回正确的数值。所以，最初的问题的真正的解决方法，应该在jQuery的这部分的代码中。&lt;/p&gt;

&lt;h2&gt;明确的解决方案&lt;/h2&gt;

&lt;p&gt;jQuery中宽高的获取也通过一个定义在jQuery上的对象&lt;code&gt;cssHooks&lt;/code&gt;处理，其中对于宽高的处理代码如下（为方便阅读，删去了&lt;code&gt;set&lt;/code&gt;部分）：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;width&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cssHooks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// certain elements can have dimension info if we invisibly show them&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// however, it must have a current display style that would benefit from this&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rdisplayswap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;display&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cssShow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getWidthOrHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;getWidthOrHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extra&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里最关键的一点是，判断如果元素是隐藏的，则调用&lt;code&gt;jQuery.swap()&lt;/code&gt;，这个函数的作用是，临时为元素替换一些css属性，然后执行一个指定的函数，最后还原元素的css属性。其中参数&lt;code&gt;cssShow&lt;/code&gt;对应了用于获取宽高所临时设置的属性，它的值是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cssShow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;absolute&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visibility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;block&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这即是Tim Banks最初给出的处理方法。所以，获取隐藏元素的宽高的可行的做法是：&lt;em&gt;临时为元素设置特定的显示样式，然后读取元素的尺寸信息，最后再还原元素的样式&lt;/em&gt;。&lt;/p&gt;

&lt;h2&gt;补充信息&lt;/h2&gt;

&lt;p&gt;MooTools一般所用的尺寸获取方法是&lt;code&gt;myElement.getSize();&lt;/code&gt;，这个方法是不能获取隐藏元素的尺寸的。但是，MooTools在它的扩展包（mootools-more）内提供了一个&lt;code&gt;element.measure(fn);&lt;/code&gt;，这个方法可以获取隐藏元素的尺寸。它是怎么做的呢，源码的一部分如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;implement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;measure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;toMeasure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;toMeasure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;restore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;toMeasure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;expose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;display&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cssText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setStyles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;block&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;absolute&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;visibility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;hidden&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cssText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;简单来说，&lt;code&gt;.meature()&lt;/code&gt;方法调用了另一个&lt;code&gt;.expose()&lt;/code&gt;方法，稍微看一下&lt;code&gt;.expose()&lt;/code&gt;的定义就可以知道，也是使用了相同的临时样式设置，在读取尺寸信息后还原的做法。&lt;/p&gt;

&lt;p&gt;MooTools的动画虽然不支持&quot;show&quot;作为属性值，但它支持一个特别的&quot;100%&quot;，正如这个数字所表示的那样，它也能满足你“动画执行到元素常规的样子”的要求。&lt;/p&gt;

&lt;p&gt;啊？说了这么多，原来只是因为作者你不知道它支持这个值...&lt;/p&gt;

&lt;p&gt;嗯...这就是过程啊...&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;获取&lt;code&gt;display&lt;/code&gt;为&lt;code&gt;none&lt;/code&gt;的元素的尺寸，确实只是一个挺小的问题。不过，它却能在各大javascript库中有所体现。对源码做一些学习，也算是方便自己以后需要独自处理的时候能多些经验。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>省时省心的自动化工具 - Grunt使用介绍</title>
   <link href="http://acgtofe.com/posts/2013/10/grunt-for-automation"/>
   <updated>2013-10-16T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/10/grunt-for-automation</id>
   <content type="html">&lt;p&gt;很多人都知道，一个实际的项目，是应该有开发（development）版和发布（released）版的区分的（发布版也常用其他的表达方式，比如线上online，产品production）。真正的线上产品需要经过测试和优化，保证其品质（如访问速度，稳定性）。从开发完成到线上发布，应该经过一些流程，常见的就是错误检查，单元测试，代码压缩。&lt;/p&gt;

&lt;p&gt;有一种观点是&quot;Great developers are lazy.&quot;，也就是说，开发过程中很多流程性的工作，要想办法让自己更轻松些。对此，普遍认同的做法就是&lt;em&gt;自动化&lt;/em&gt;（&lt;em&gt;automation&lt;/em&gt;）。&lt;/p&gt;

&lt;p&gt;就一个前端的项目而言，先来看看开发版与发布版的大致差异。&lt;/p&gt;

&lt;h2&gt;开发版与发布版&lt;/h2&gt;

&lt;p&gt;从直观的感受简单说的话，css的差异是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/grunt_contrast_css.jpg&quot; title=&quot;css的差异&quot; alt=&quot;css的差异&quot; /&gt;&lt;/p&gt;

&lt;p&gt;javascript的差异是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/grunt_contrast_js.jpg&quot; title=&quot;javascript的差异&quot; alt=&quot;javascript的差异&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此外，各类格式的图片也可以做一定程度的优化，减小文件大小。可见，作为发布版，主要是从各个层面减小文件大小，提升访问速度。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Grunt&lt;/em&gt;是一个由node编写的自动化工具。对于我这样从事前端开发的人来说，比起其他的后端语言，Grunt这种使用javascript的工具会显得更亲切，更适合。&lt;/p&gt;

&lt;h2&gt;Grunt安装初始&lt;/h2&gt;

&lt;p&gt;我自己用的电脑是windows，所以说的是windows下的安装（各位看到的linux/mac安装教程还少么 (｡・д・)ﾉ ）。&lt;/p&gt;

&lt;p&gt;首先，如果你还没有安装node，请到&lt;a href=&quot;http://nodejs.org/&quot; title=&quot;node.js&quot;&gt;node官网&lt;/a&gt;下载。windows系统中使用的是一个&lt;code&gt;.msi&lt;/code&gt;安装包，点击安装即可。&lt;/p&gt;

&lt;p&gt;Grunt直接通过&lt;a href=&quot;https://npmjs.org/&quot; title=&quot;npm&quot;&gt;npm&lt;/a&gt;安装。如果不知道npm是什么，可点击&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/Node%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8&quot; title=&quot;维基百科-npm&quot;&gt;维基百科-npm&lt;/a&gt;查看。就算不知道它是什么也没关系，&lt;em&gt;现在的node安装包已经内置了npm&lt;/em&gt;，直接使用即可。&lt;/p&gt;

&lt;p&gt;快捷键&lt;code&gt;Win&lt;/code&gt;+&lt;code&gt;R&lt;/code&gt;打开windows中的运行窗口，然后输入&lt;code&gt;cmd&lt;/code&gt;，打开命令提示符，在其中输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g grunt-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一步是安装Grunt的命令行支持（command line interface，简称CLI），在这之后，命令提示符中将会识别&lt;code&gt;grunt&lt;/code&gt;命令。&lt;/p&gt;

&lt;p&gt;到此，Grunt并不能称为安装完毕。这是因为，&lt;em&gt;Grunt本身不是全局使用的，任何具体的工作目录，如果要使用Grunt，都需要安装一次Grunt&lt;/em&gt;。这样做也是因为不同的工作目录，需要通过Grunt做的自动化工作也不同，因此需要独立配置。&lt;/p&gt;

&lt;p&gt;使用Grunt必须要配置两个文件。一个是&lt;code&gt;package.json&lt;/code&gt;，另一个是&lt;code&gt;Gruntfile.js&lt;/code&gt;（准确地说，还可以是&lt;code&gt;Gruntfile.coffee&lt;/code&gt;，但本文不介绍这个）。&lt;/p&gt;

&lt;h2&gt;文件之一：package.json&lt;/h2&gt;

&lt;p&gt;npm对工作目录有一个要求。这个要求是：根目录位置处有一个&lt;code&gt;package.json&lt;/code&gt;文件。这个文件定义了工作目录对应的一些项目信息（名字，描述），以及包（就是npm模块）依赖关系。它可以很简单，如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;huayixia&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;huayixia website&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可以复制上面的内容自己手工创建&lt;code&gt;package.json&lt;/code&gt;文件。如果你希望更官方一些，你可以在该工作目录位置处打开命令提示符：（属于小技巧，请看下图）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/cmd_in_directory.png&quot; title=&quot;在某一目录打开cmd&quot; alt=&quot;在某一目录打开cmd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来命令行中会问你一些问题，简单输入答复后（如果要留空，直接回车就可以），就可以在目录中自动生成一个&lt;code&gt;package.json&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在有了&lt;code&gt;package.json&lt;/code&gt;之后，就可以为工作目录安装Grunt。在工作目录位置的命令提示符中输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install grunt --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;后面的&lt;code&gt;--save-dev&lt;/code&gt;不是必须的，但建议写上。它的作用是，在安装的同时，把Grunt的安装信息写入&lt;code&gt;package.json&lt;/code&gt;。在有&lt;code&gt;--save-dev&lt;/code&gt;安装操作后，&lt;code&gt;package.json&lt;/code&gt;的内容会变成这样：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;huayixia&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;huayixia website&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;devDependencies&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;grunt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;~0.4.1&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从中可以看到&lt;code&gt;devDependencies&lt;/code&gt;部分，已有Grunt的信息。同时，目录中会多出&lt;code&gt;node_modules&lt;/code&gt;目录，里面存放的是Grunt的源文件。使用Grunt不需要管这个目录，&lt;/p&gt;

&lt;p&gt;Grunt的实际工作，必须要结合各类&lt;em&gt;Grunt插件&lt;/em&gt;（&lt;em&gt;Grunt Plugins&lt;/em&gt;）进行。根据工作目录的实际情况，从&lt;a href=&quot;http://gruntjs.com/plugins&quot; title=&quot;Grunt Plugins&quot;&gt;Grunt插件列表&lt;/a&gt;中选择需要的插件安装到目录即可。插件列表中，有星星标识的的&quot;contrib&quot;系列，是官方团队提供的。大部分情况下，推荐使用官方插件（不然怎么叫官方(￣▽￣)）。&lt;/p&gt;

&lt;p&gt;插件的安装方式和安装Grunt一样。比如安装&quot;grunt-contrib-uglify&quot;（javascript压缩工具），在目录位置的命令提示符中输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install grunt-contrib-uglify --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样，建议写上&lt;code&gt;--save-dev&lt;/code&gt;，以记录到&lt;code&gt;package.json&lt;/code&gt;文件中。插件的源文件也会存放到&lt;code&gt;node_modules&lt;/code&gt;目录中。&lt;/p&gt;

&lt;h2&gt;文件之二：Gruntfile.js&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Gruntfile.js&lt;/code&gt;相当于Grunt的配置文件，也必须位于根目录。这个文件建议手工创建（模板也可以创建，但模板的使用并不简单，所以还是复制起来更容易）。我自己的目录需要做的自动化工作分别是：css代码压缩，图片优化，js代码压缩。我选用了3个对应的插件来完成，分别是&lt;code&gt;grunt-contrib-cssmin&lt;/code&gt;，&lt;code&gt;grunt-contrib-imagemin&lt;/code&gt;，&lt;code&gt;grunt-contrib-uglify&lt;/code&gt;。最后我的&lt;code&gt;Gruntfile.js&lt;/code&gt;的内容是：（为方便说明，精简了细节部分）&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;myname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;yuki&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//自定义变量&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;uglify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//grunt插件都有options&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;min&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;minify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// minify只是一个target命名，可以自定&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;dev/js/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;*.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;online/js/&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cssmin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;minify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;imagemin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;minify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-contrib-uglify&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-contrib-cssmin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-contrib-imagemin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cssmin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;imagemin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;uglify&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来做详细说明。首先，&lt;code&gt;module.exports = function(grunt) {};&lt;/code&gt;是一整个函数，它就像一个容器一样（&lt;code&gt;module.exports&lt;/code&gt;是node中的语法，用于代码导出，以供其他javascript脚本使用）。所有的配置代码都应该写在这个函数内。&lt;/p&gt;

&lt;p&gt;然后，在函数内，由空行的分隔，可以看出有三部分。先来说明很简单的后两部分。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grunt.loadNpmTasks();&lt;/code&gt;是加载插件任务。其实就是说，你如果要使用哪个插件的功能，请在这部分用这句代码把插件任务添加进去。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grunt.registerTask();&lt;/code&gt;是注册任务，默认有一个&lt;code&gt;default&lt;/code&gt;。默认的意思就是说，你最后使用的时候，在目录的命令提示符里直接输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grunt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就相当于输入了&lt;code&gt;grunt default&lt;/code&gt;，然后会执行注册的任务命令。函数第二个参数一般用数组，里面依次对应这个任务命令会执行的各个插件任务，而且会按照指定的顺序进行。比如上面的&lt;code&gt;Gruntfile.js&lt;/code&gt;配置代码，对应的就是按顺序依次执行&lt;code&gt;cssmin&lt;/code&gt;，&lt;code&gt;imagemin&lt;/code&gt;，&lt;code&gt;uglify&lt;/code&gt;这几个插件任务了。&lt;/p&gt;

&lt;p&gt;插件任务可以单独执行，比如只需要图片优化(对应&quot;imagemin&quot;)，可以输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grunt imagemin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以注册更多的任务命令，使用其他的命名。比如&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;custom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cssmin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;imagemin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对应使用的时候，输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grunt custom
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Grunt插件配置&lt;/h2&gt;

&lt;p&gt;下面来看比较复杂的&lt;code&gt;grunt.initConfig();&lt;/code&gt;。这个函数调用的时候使用的Object类别的参数，即包含了配置的全部信息。&lt;/p&gt;

&lt;p&gt;这个Object参数中，只要不和插件名冲突，可以任意自定义变量，如上面的&lt;code&gt;Gruntfile.js&lt;/code&gt;文件中的&lt;code&gt;pkg&lt;/code&gt;（它调用了Grunt的一个函数读取json文件信息），&lt;code&gt;myname&lt;/code&gt;。此外的部分，则对应插件各自的配置信息，如&lt;code&gt;cssmin&lt;/code&gt;，&lt;code&gt;uglify&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后，在每一个插件信息内，可以定义选项&lt;code&gt;options&lt;/code&gt;，它对应这个插件的具体配置，一般随插件不同，配置信息也不同，需要到插件的说明页查看。此外，是定义&lt;em&gt;任务目标&lt;/em&gt;（&lt;em&gt;target&lt;/em&gt;）。大部分Grunt插件都是多任务的，因此可以定义多个，而且都可以自定义命名（除&lt;code&gt;options&lt;/code&gt;外）。而且，每个任务目标内，也可以定义自己的目标级别的&lt;code&gt;options&lt;/code&gt;，它会覆盖上一级的插件级别的&lt;code&gt;options&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在每个任务目标内，定义的是目标具体的操作内容说明。其中，最常见的就是&lt;em&gt;文件操作&lt;/em&gt;（&lt;em&gt;Files&lt;/em&gt;）。文件操作的配置，是指定需要操作的文件，以及如何输出等，&lt;em&gt;它是所有涉及文件操作的Grunt插件都遵守的&lt;/em&gt;。我最初用的时候，还很奇怪为什么每个插件的说明页贴了一堆示意代码，却没有对其中的配置内容说明完全，原来是因为这些是“公用”的...&lt;/p&gt;

&lt;p&gt;以我最终使用的代码为例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;uglify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;minify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;dev/js/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;*.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;online/js/&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这可能是比较常用的配置。其中的&lt;code&gt;expand&lt;/code&gt;表示动态生成文件，当它为&lt;code&gt;true&lt;/code&gt;的时候，才可以配置下面几项。&lt;code&gt;cwd&lt;/code&gt;是指作为来源的所有&lt;code&gt;src&lt;/code&gt;，都以其作为相对路径。&lt;code&gt;src&lt;/code&gt;表示实际操作的文件，这里使用通配符，搭配了目录下的所有&lt;code&gt;.js&lt;/code&gt;文件。&lt;code&gt;dest&lt;/code&gt;是&quot;destination&quot;，表示目标文件的位置。在按照上面的代码设置后，&lt;code&gt;uglify&lt;/code&gt;的任务执行效果，就是把所有&lt;code&gt;dev/js/&lt;/code&gt;下的&lt;code&gt;.js&lt;/code&gt;文件，都做压缩，处理得到的结果文件对应存放到&lt;code&gt;online/js/&lt;/code&gt;目录中。&lt;/p&gt;

&lt;p&gt;详细的配置指南，请查看官方的&lt;a href=&quot;http://gruntjs.com/configuring-tasks&quot; title=&quot;Configuring tasks&quot;&gt;Configuring tasks&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;回到前面说的任务目标。还需要补充的是，任务目标也可以单独运行，比如输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grunt uglify:foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则只会运行&lt;code&gt;uglify&lt;/code&gt;任务的名称为&lt;code&gt;foo&lt;/code&gt;的任务目标。显然，如果不用&lt;code&gt;:&lt;/code&gt;指定目标，则会依次运行该任务中的所有任务目标。&lt;/p&gt;

&lt;h2&gt;Grunt使用&lt;/h2&gt;

&lt;p&gt;在配置好之后，就可以运行Grunt。很简单，在工作目录位置打开命令提示符，然后输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grunt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后等待执行完毕。你可以看到其中的每一个任务的执行信息，比如我的情况：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/grunt_cmd.png&quot; title=&quot;运行grunt&quot; alt=&quot;运行grunt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个过程十分迅速。任何时候需要的时候，执行一遍，就可以得到更新后的发布版。所以，真的是很省时省心。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;Grunt很像是一个工具平台，在看它的插件列表的时候，我发现了一些以前熟悉的东西，比如requireJS，compass，livereload。而原本这些工具，比如compass是ruby语言编写的。但在Grunt中，它就是node，所以，可以理解为，grunt整合了一系列的工具的node实现版。不过，无论怎样，它们都是为开发工作服务，让开发过程更轻松。&lt;/p&gt;

&lt;p&gt;很推荐做前端开发的各位试试Grunt。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>闪之轨迹初玩感想</title>
   <link href="http://acgtofe.com/posts/2013/10/ed-sen"/>
   <updated>2013-10-05T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/10/ed-sen</id>
   <content type="html">&lt;p&gt;英雄传说：闪之轨迹的故事舞台设定在了埃雷波尼亚帝国（正如前作碧之轨迹在End Card中写的&quot;To be Continued...Another Place's Story.&quot;）。这个位于塞姆利亚大陆西部的最大的国家，近年来则因为“贵族派”和“革新派”的两股势力的对抗，不断地趋于动乱，国内形势也越发紧张。闪轨所讲述的即是这个阶段，帝国内的另一群人物的故事。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/sen_cover.jpg&quot; title=&quot;闪之轨迹Start Card&quot; alt=&quot;闪之轨迹Start Card&quot; /&gt;&lt;/p&gt;

&lt;p&gt;帝国有着悠久的历史，但也因此是一个很看重出身的国家。贵族的思想可以说根深蒂固，平民和贵族之间总是会存在着或多或少的对立，而如今以“铁血宰相”（平民出身，碧之轨迹中已见到本人）为中心的“革新派”的出现和行动，势必会让这种对立状态进一步加剧。&lt;/p&gt;

&lt;p&gt;闪之轨迹的故事时间，大致上平行于零之轨迹和碧之轨迹。我找到一个相关的NPC的对话：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/sen_time_clue_from_npc.jpg&quot; title=&quot;第一章时某NPC的对话&quot; alt=&quot;第一章时某NPC的对话&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里提到的克洛斯贝尔创立创立纪念祭，正是零之轨迹的第三章的事情，而这个时候闪轨里还是第一章。好了，关于故事的序言就到这里，接下来说说游戏本身。&lt;/p&gt;

&lt;h3&gt;全新的画面&lt;/h3&gt;

&lt;p&gt;falcom这一次使用了新的游戏引擎，人物采用真实比例的模型（嗯，虽然轨迹一直以来的Q版人物模型也很好看），画面操作也改变为控制移动+自由视角，所以可以说是很不一样的游戏体验。我开始是觉得操作起来有些费劲，但很快就习惯了。人物动作和表情也直接在场景中体现，而且看起来还是很自然的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/sen_expression.jpg&quot; title=&quot;汗...&quot; alt=&quot;汗...&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;语音&lt;/h3&gt;

&lt;p&gt;非常值得一提的是，闪之轨迹的语音做得非常多，非常丰富。也许是前作零轨碧轨在语音上的尝试让falcom感到对游戏增色很有益处，所以闪轨中，更加用心地为游戏添加了各类语音。之前就有消息说是语音量达到零轨碧轨的数十倍，实际看来也确实如此。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/sen_voice.jpg&quot; title=&quot;丰富的语音&quot; alt=&quot;丰富的语音&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;地图和导航&lt;/h3&gt;

&lt;p&gt;再也不用担心找不到怎么完成支线和继续主线了！本作中把与主线故事或支线任务相关的内容，都标记在了地图上（除了隐藏任务，不然怎么叫隐藏呢...）。这也许是考虑到，在全3D化后，搜索东西会变成一件非常困难的事。总之，多看看地图，就不会转得太晕。在战斗性质的地图中，连敌人的位置（包括通缉魔兽，这在原来的轨迹系列里找起来说不定就是个麻烦事），都标注好了，实在是太亲切了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/sen_map.jpg&quot; title=&quot;场景地图&quot; alt=&quot;场景地图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本作更新的一个选项卡界面叫做“导航”(Navigation)，这个导航中会告知目前要做的事（主线），以及方便地在不同的位置之间传送。看到这个界面，是不是会觉得有“小伙伴的位置都告诉你了，快找他们去玩吧！”的意思？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/sen_navigation.jpg&quot; title=&quot;场景导航&quot; alt=&quot;场景导航&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;一如既往的选择题&lt;/h3&gt;

&lt;p&gt;闪之轨迹里，仍然要面对着这样或那样的选择题。也许是上课时候的小问答，也许是关于某个事件的分析推理，也或者是买卖东西的小游戏，总之，如果在意AP（Academic Point，学分...），想要选对的话就要对世界观、故事等多加注意了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/sen_choice.jpg&quot; title=&quot;老师，我真的不知道...&quot; alt=&quot;老师，我真的不知道...&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;超强的笔记本NOTE&lt;/h3&gt;

&lt;p&gt;在前作中还分别定义为钓鱼手册、烹饪手册、战斗手册的这些各种各样的信息，本作中全部都集结在了NOTE笔记之中。而且NOTE笔记还确实新增了一些东西。比如下面的人物记录：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/sen_note.jpg&quot; title=&quot;美术部的リンデ&quot; alt=&quot;美术部的リンデ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;轨迹系列的NPC一贯如此。随着游戏流程的进行，同样的NPC会出现在不同的地方，有着不同的对话。所有的这些一方面体现着这位角色的性格、背景，另一方面也是以一个轨迹世界中的人物的身份，和玩家一同见证着游戏中的故事。&lt;/p&gt;

&lt;h3&gt;简化的战术导力器&lt;/h3&gt;

&lt;p&gt;曾经，轨迹系列里的战术导力器的配置是一件很麻烦（足以吓走很多对复杂设定很不能接受的玩家），且很有技术含量的活。现在的闪之轨迹里，取消了属性叠加的设计，使得一切变得非常简单。现在来说，结晶回路只有两类，一类是装上后可以使用某特定魔法，另一类是装上后提升属性（比如攻击力）。当然，也有比较高级的结晶回路同时有前面两类的功能。但属性叠加的取消，就意味着再也不用对着魔法手册拼回路了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/sen_orbment.jpg&quot; title=&quot;闪轨中的战斗导力器&quot; alt=&quot;闪轨中的战斗导力器&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;战斗系统&lt;/h3&gt;

&lt;p&gt;值得称赞的是，全3D化之后，闪轨的战斗过程仍然很有流畅感。仍然是轨迹系列经典的战斗模式，但在新画面下感觉很棒。本作增加了link系统，大概意思是说用羁绊的力量战斗（游戏包装盒上写的絆の力で戦え！不是我想的...），实际效果是战斗中的连击。在等级提高之后，还会有更多的连击效果（具体是什么，才在第一章的我实在不知道...）。对于喜欢“菜刀流”（主要使用普通攻击，完全不使用魔法的战斗方式）的玩家来说，绝对很有用！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/sen_link.jpg&quot; title=&quot;link系统&quot; alt=&quot;link系统&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;帝国风&lt;/h3&gt;

&lt;p&gt;用这个词是我觉得闪轨的整体设计，都很有一种华丽的感觉。看看游戏主菜单界面，不知道是不是可以说很有“贵族风情”？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201310/sen_menu_frame.jpg&quot; title=&quot;主菜单界面&quot; alt=&quot;主菜单界面&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;略长的loading时间&lt;/h3&gt;

&lt;p&gt;这一点是闪轨的比较明显的不足。虽然不清楚具体是因为什么原因造成的，但各种场景切换的loading实在是看得有点伤。尤其是刚开始的时候，一场普通遇敌战斗进入战斗场景也给我来个loading，这实在不能忍...还好，10月3日的时候官方出了1.01的补丁（这个补丁我试的结果是能一定程度缩短loading时间），所以，我是等到这个补丁出并更新之后，再继续流程的。毕竟是在轨迹系列作品中第一次使用新引擎，只能说falcom对该引擎的使用和优化还不够熟悉吧。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;整体来说，闪轨作为轨迹系列在新引擎方面的尝试，感觉很不错，值得肯定（其实也想说，买这个很值了...）。虽然画面和操作有不小的变化，但游戏中的各种细节又无时不刻在提醒着这是轨迹系列的游戏，也因此有着各种熟悉感和亲切感。&lt;/p&gt;

&lt;p&gt;对于日系RPG游戏有爱的玩家，我都觉得会很乐意体验这个falcom带来的轨迹世界中的新故事。&lt;/p&gt;

&lt;p&gt;（注：所有截图来源于PSV，图中的水印是falcom设置的）&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>不只是平面：css三维变换的应用</title>
   <link href="http://acgtofe.com/posts/2013/09/css-3d-transform"/>
   <updated>2013-09-22T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/09/css-3d-transform</id>
   <content type="html">&lt;h2&gt;坐标系统&lt;/h2&gt;

&lt;p&gt;我们所看到的网页的布局，遵循的是坐标系统的概念。这是在说，浏览器在实际地渲染和显示一个网页前，会先进行布局计算，得到网页中所有元素对应的坐标位置以及尺寸信息。如果有任意元素的坐标位置或尺寸信息发生了改变，浏览器都会重新进行布局计算。这个重新计算的过程也称为回流（reflow）。&lt;/p&gt;

&lt;p&gt;css的变换对应属性&lt;code&gt;transform&lt;/code&gt;，它的作用是修改元素自身的坐标空间。这个修改实际对应了一个坐标系统映射转换的矩阵。通过变换，元素可以实现在二维或三维的空间内的平移、旋转和缩放。需要注意的是，虽然也是关于坐标系统，但变换改变的只是元素的视觉渲染，是在元素的布局计算后起作用的，因此在布局层面没有影响。一般情况下，变换也不会引发回流。&lt;/p&gt;

&lt;p&gt;网页中使用的坐标系统是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201309/coordinate_space.png&quot; title=&quot;坐标系统&quot; alt=&quot;坐标系统&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;transform&lt;/code&gt;的值包含了一系列&lt;em&gt;变换函数&lt;/em&gt;（&lt;em&gt;transform function&lt;/em&gt;），其中一部分变换函数可以产生三维变换。但是，只是这样做，是不能得到可用的三维变换效果的。要想正确地应用css三维变换，还需要理解并使用其他和三维变换有关的css属性。&lt;/p&gt;

&lt;h2&gt;三维效果之perspective&lt;/h2&gt;

&lt;p&gt;正确的三维效果，是建立在一定的透视变化的基础之上的。所谓透视变化，就是指以人眼看实际的景物时会有的“近大远小”的效果。此外，还有一个概念是&lt;em&gt;灭点&lt;/em&gt;（&lt;em&gt;vanishing point&lt;/em&gt;），请看下面这张图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201309/vanishing_point_explain_photo.jpg&quot; title=&quot;照片中的灭点&quot; alt=&quot;照片中的灭点&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里，你会有一个直观的感受：当景物离自己的位置越远时，就会越趋于集中到某一个点上。这个点就是灭点，它对于建立三维效果是非常关键的。&lt;/p&gt;

&lt;p&gt;现在再来考虑网页中的三维效果。请不要认为网页真的可以把元素排列在离屏幕前的你不同距离的位置(￣Д￣lll)。网页仍然只会显示在你眼前的屏幕上，其中的元素仍然位于同一平面。但是，元素会依照自己在虚拟三维空间中的位置，调整自己的位置和尺寸，从而创造出正确的三维效果。这个从虚拟三维空间转换到平面中的显示过程，也常称为投影。&lt;/p&gt;

&lt;p&gt;perspective就是控制这个投影的参数。它表示的是假想的观察点到元素的绘制平面（也就是显示网页的平面）的距离，浏览器会根据这个距离值，以及元素的Z轴坐标，计算出用于投影缩放的比例。下图中的d对应的就是perspective的值：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201309/perspective_distance.png&quot; title=&quot;perspective与元素Z轴坐标&quot; alt=&quot;perspective与元素Z轴坐标&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这就是透视变化的“近大远小”的效果的原理。因此，要产生三维效果，必须要指定perspective。这个参数有两种指定方法：直接使用&lt;code&gt;perspective&lt;/code&gt;属性（本文在代码中省略了属性的前缀，实际使用时，请加上前缀）：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.aya&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perspective&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以及作为&lt;code&gt;transform&lt;/code&gt;的一个变换函数使用：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.aya&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perspective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这两种指定方法是很有区别的。当perspective作为&lt;code&gt;transform&lt;/code&gt;的一个变换函数使用时，透视变化只作用于应用了此变换的单一元素。而&lt;code&gt;perspective&lt;/code&gt;属性的写法，则一般用在需要三维变换的多个元素的父元素上，它会使对应元素的子元素共享同一个透视变化（包括灭点位置）。此外，当使用&lt;code&gt;perspective&lt;/code&gt;属性时，还可以使用&lt;code&gt;perspective-origin&lt;/code&gt;属性修改透视变化中的灭点的位置（默认是中心点）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201309/perspective_origin.png&quot; title=&quot;perspective-origin通过改变观察点位置改变灭点&quot; alt=&quot;perspective-origin通过改变观察点位置改变灭点&quot; /&gt;&lt;/p&gt;

&lt;p&gt;perspective指定的值是观察点到绘制平面的距离。因此，当这个值越大，看到的三维效果就越细微，当这个值越小，就越可以看到明显的三维效果。&lt;em&gt;perspective的值必须为正数&lt;/em&gt;（也就是说，不包括0）。&lt;/p&gt;

&lt;h2&gt;三维效果之transform-style&lt;/h2&gt;

&lt;p&gt;css属性&lt;code&gt;transform-style&lt;/code&gt;只有两个取值&lt;code&gt;flat&lt;/code&gt;（默认）和&lt;code&gt;preserve-3d&lt;/code&gt;。当它的取值为&lt;code&gt;preserve-3d&lt;/code&gt;时，会关联影响到一个状态，称为&lt;em&gt;三维渲染上下文&lt;/em&gt;（&lt;em&gt;3D rendering context&lt;/em&gt;）。&lt;/p&gt;

&lt;p&gt;在默认情况下，是不存在三维渲染上下文的。元素创建或加入一个三维渲染上下文遵循以下原则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当一个元素原本不处于三维渲染上下文中，而属性&lt;code&gt;transform-style&lt;/code&gt;的计算值为&lt;code&gt;preserve-3d&lt;/code&gt;时，这个元素将创建一个三维渲染上下文。在创建之后，这个元素自己也加入到这个上下文中。&lt;/li&gt;
&lt;li&gt;当一个元素已处于三维渲染上下文中，而属性&lt;code&gt;transform-style&lt;/code&gt;的计算值为&lt;code&gt;preserve-3d&lt;/code&gt;，这个元素将扩展这个三维渲染上下文，而不是新创建一个。&lt;/li&gt;
&lt;li&gt;如果一个元素的包含块（containing block，&lt;a href=&quot;http://www.w3help.org/zh-cn/kb/008/&quot; title=&quot;包含块( Containing block )  - W3Help&quot;&gt;详情&lt;/a&gt;）创建或扩展了一个三维渲染上下文，则判定这个元素处于这个三维渲染上下文中。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;以上是非常严谨的判断原则。那么，这个三维渲染上下文是做什么用的呢？&lt;/p&gt;

&lt;p&gt;前文说到，为一个元素指定&lt;code&gt;perspective&lt;/code&gt;属性，就可以使它的子元素共享同一个透视变化。但是，如果不创建三维渲染上下文，只有指定了&lt;code&gt;perspective&lt;/code&gt;的元素的直接子元素，可以产生透视变化。而要使更深层级的子元素，也共享同一个透视变化，则需要使用&lt;code&gt;transform-style&lt;/code&gt;。位于同一个三维渲染上下文的元素，它们的透视变化都是相同的，灭点也相同，就好像它们都位于同一个三维空间内。&lt;/p&gt;

&lt;p&gt;在没有这个三维渲染上下文时（也就是不设置&lt;code&gt;transform-style&lt;/code&gt;），三维变换的元素也是可以看到三维效果的（单独使用perspective）。但是，这时候的三维变换其实只是一种绘制效果（painting effect），就像二维变换那样。我们知道，在网页中，元素之间的覆盖关系取决于绘制顺序，绘制顺序靠后的元素将显示在前面。更专业一点说，是网页中的堆叠上下文（stacking context，详细见&lt;a href=&quot;http://www.w3.org/TR/CSS2/zindex.html&quot; title=&quot;Elaborate description of Stacking Contexts&quot;&gt;Elaborate description of Stacking Contexts&lt;/a&gt;）。常用的&lt;code&gt;z-index&lt;/code&gt;属性，也是控制元素的堆叠上下文。&lt;/p&gt;

&lt;p&gt;这里就会有一个问题，按照真实三维空间的情况，应该是Z坐标值较大（也就是更靠近观察者）的元素，显示在Z坐标值较小的元素的前边。但&lt;code&gt;z-index&lt;/code&gt;这时候又会如何呢？我们来看一个例子。html：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;paint_stage&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;paint_plane paint_plane_1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;paint_plane paint_plane_2&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对应的css：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.paint_stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perspective&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.paint_plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.paint_plane_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;orange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.paint_plane_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这时候的效果是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201309/transform_style_result_1.png&quot; title=&quot;不设置transform-style时的覆盖关系&quot; alt=&quot;不设置transform-style时的覆盖关系&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后修改css，为&lt;code&gt;.paint_stage&lt;/code&gt;增加&lt;code&gt;transform-style:preserve-3d;&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.paint_stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perspective&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preserve&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.paint_plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.paint_plane_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;orange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.paint_plane_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;得到新的覆盖效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201309/transform_style_result_2.png&quot; title=&quot;设置transform-style后的覆盖关系&quot; alt=&quot;设置transform-style后的覆盖关系&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，此时，橙色的平面因Z轴坐标更大，显示在了紫色的平面的前边，并遮挡住了紫色平面（越靠近观察点，尺寸越大）。&lt;/p&gt;

&lt;p&gt;这就是说，如果不设置&lt;code&gt;transform-style&lt;/code&gt;创建三维渲染上下文，那么三维变换就只能说是元素的一个绘制效果，绘制顺序依然用传统的堆叠上下文来判断。&lt;em&gt;只有创建了三维渲染上下文之后，其中的元素才真正按照三维空间的排布，确定正确的绘制顺序&lt;/em&gt;。&lt;/p&gt;

&lt;h2&gt;三维效果之backface-visibility&lt;/h2&gt;

&lt;p&gt;你可能注意到，网页中用作三维变换的都是平面。处于三维空间中的平面，是存在一个朝向问题的。在初始情况下，规定平面的朝向为正向。当使用&lt;code&gt;transform&lt;/code&gt;做变换时，平面的朝向就会发生改变。如果把平面想象为一个厚度极小的三维物体，那么变化过程中，这个三维物体的另一面就可能朝向观察者。&lt;/p&gt;

&lt;p&gt;css的三维变换对此也做了处理。当认为是平面的“背面”朝向观察者时，平面内的内容会变为对应的镜像。css属性&lt;code&gt;backface-visibility&lt;/code&gt;有2个取值，&lt;code&gt;visible&lt;/code&gt;（默认）和&lt;code&gt;hidden&lt;/code&gt;。显然，设置&lt;code&gt;backface-visibility:hidden;&lt;/code&gt;的意思，就是说当认为平面是“背面”朝向观察者时，不再显示这个平面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201309/backface_visibility_explain.png&quot; title=&quot;backface-visibility的作用&quot; alt=&quot;backface-visibility的作用&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在三维建模中，三维物体实际都是由多个平面围成。从某一观察点来观察三维物体，只应该看到一部分可见的平面。因此，这个属性可以让处于背面的平面不作显示，从而形成更合理的三维效果。&lt;/p&gt;

&lt;p&gt;还需要注意的是，&lt;code&gt;backface-visibility&lt;/code&gt;&lt;em&gt;不是可继承属性，必须定义在有三维变换的元素本身才有效&lt;/em&gt;。&lt;/p&gt;

&lt;h2&gt;应用三维变换的实例&lt;/h2&gt;

&lt;p&gt;现在，我们可以考虑通过三维建模的方法，为网页加入三维切换效果。这比起只使用&lt;code&gt;transform&lt;/code&gt;和perspective得到三维效果更困难，因为它需要我们按照三维建模的方式，搭建真正的三维物体。&lt;/p&gt;

&lt;p&gt;如果不是深刻理解了前面所述的几个三维变换的相关属性，很可能会对三维物体的创建方法有很多困惑。但幸运的是，已有前辈为我们提供了基本的、可靠的三维物体的创建模式，请看下面这个实例。html：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;object_3d&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;surface surface_front&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello,&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;surface surface_up&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I&amp;#39;m Alice.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;css：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;perspective&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.object_3d&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preserve&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotateX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;.5s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.object_3d&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.surface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;76px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;76px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#e43a2e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ff6b38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;backface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;visibility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.surface_front&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotateX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.surface_up&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotateX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.object_3d&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translateZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotateX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-90&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样三层级的DOM，即可实现在三维空间中搭建三维物体。实际效果如下（移上去看效果，限支持的浏览器）：&lt;/p&gt;

&lt;div class=&quot;post_display transform_3d_demo&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;object_3d&quot;&gt;
            &lt;div class=&quot;surface surface_front&quot;&gt;Hello,&lt;/div&gt;
            &lt;div class=&quot;surface surface_up&quot;&gt;I'm Alice.&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;这里其实只用了两个平面，并不是完整的立方体，但仍然是实实在在的三维切换效果。&lt;/p&gt;

&lt;p&gt;关于这个创建模式的有关知识，欢迎你阅读David DeSandro的&lt;a href=&quot;http://desandro.github.io/3dtransforms/docs/introduction.html&quot; title=&quot;Intro to CSS 3D transforms&quot;&gt;Intro to CSS 3D transforms&lt;/a&gt;，本文的实例就是参照了他介绍的做法。&lt;/p&gt;

&lt;h2&gt;其他补充说明&lt;/h2&gt;

&lt;h3&gt;变换函数的叠加原理&lt;/h3&gt;

&lt;p&gt;在属性&lt;code&gt;transform&lt;/code&gt;的值中，你可以使用一系列的变换函数。存在多个变换函数时，最终效果与排列顺序有关，比如&lt;code&gt;transform:rotateX(45deg) translateZ(30px);&lt;/code&gt;和&lt;code&gt;transform:translateZ(30px) rotateX(45deg);&lt;/code&gt;得到的变换效果是不同的（这是因为矩阵乘法是不可交换的）。而且，多个变换函数以某一顺序写在一个&lt;code&gt;transform&lt;/code&gt;的最终变换效果，和多个变换函数保持原顺序分开作用于存在变换关联的不同DOM元素的最终变换效果是相同的。举例来说，就是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;transform:translate(-10px,-20px) scale(2) rotate(45deg) translate(5px,10px)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从功能上说等同于：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;transform:translate(-10px,-20px)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;transform:scale(2)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;transform:rotate(45deg)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;transform:translate(5px,10px)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个例子来自&lt;a href=&quot;http://dev.w3.org/csswg/css-transforms/#transform-function-lists&quot; title=&quot;The Transform Function Lists&quot;&gt;The Transform Function Lists&lt;/a&gt;。&lt;/p&gt;

&lt;h3&gt;浏览器兼容性&lt;/h3&gt;

&lt;p&gt;最新的浏览器对三维变换的支持情况，以及是否需要使用前缀写法，都请到&lt;a href=&quot;http://caniuse.com/#feat=transforms3d&quot; title=&quot;caniuse.com/#feat=transforms3d&quot;&gt;caniuse.com/#feat=transforms3d&lt;/a&gt;。&lt;/p&gt;

&lt;h3&gt;与动画的结合&lt;/h3&gt;

&lt;p&gt;三维变换和其他的一般属性一样，都可以用于制作动画：&lt;/p&gt;

&lt;div class=&quot;post_display&quot;&gt;
    &lt;div class=&quot;badge_container&quot;&gt;
        &lt;div class=&quot;angel_beats_badge&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;165&quot; src=&quot;/assets/used-images/posts/201309/angel_beats_badge.png &quot;alt=&quot;Angel Beats!&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;三维变换的确是新的提供给我们前端开发用的很酷的东西。不过，不推荐使用css的三维变换来制作完全的3D网页。css是被定义用来为网页添加样式的，而不是用来生成虚拟空间的。因此，适当地在网页中的一部分地方，考虑应用三维变换即可，这说不定会让你的网站看起来非常棒。&lt;/p&gt;

&lt;p&gt;不只是平面的网页，是不是很值得做一些尝试呢？&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>有趣而不常见的css选择符命名</title>
   <link href="http://acgtofe.com/posts/2013/08/unusual-css-selectors-characters"/>
   <updated>2013-08-31T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/08/unusual-css-selectors-characters</id>
   <content type="html">&lt;h2&gt;原来命名可以这样的&lt;/h2&gt;

&lt;p&gt;前一段时间，在某一站点看到了这样的内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201308/unusual_css_selectors_of_one_site.png&quot; title=&quot;不常见的css选择符&quot; alt=&quot;不常见的css选择符&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&quot;这也可以？&quot;是我对此的第一印象。不过，稍作调查知道了，这样写确实是有效的。此外，这个&lt;code&gt;ಠ_ಠ&lt;/code&gt;的符号表情，看起来是不是相当有存在感？再看看搭配的css属性，&lt;code&gt;display: none !important;&lt;/code&gt;即定义元素一定不显示，是不是也非常符合这个表情想要表达的意思？&lt;/p&gt;

&lt;p&gt;只要遵循css语法，就可以很好地应用这种不常见的命名。&lt;/p&gt;

&lt;h2&gt;命名字符的规定&lt;/h2&gt;

&lt;p&gt;英文单词的组合你一定很熟悉，例如&lt;code&gt;.top_nav&lt;/code&gt;用来表示顶部导航，不仅用了合法的选择符，而且也很符合语义化的要求。&lt;/p&gt;

&lt;p&gt;另外，你应该也知道，选择符命名的开头字符，不可以是数字，例如&lt;code&gt;.3-column&lt;/code&gt;不是合法的选择符。使用不合法的选择符的后果是，对应的css样式规则会因为选择符无法正确解析，而变为无效。&lt;/p&gt;

&lt;p&gt;事实上，css语法对于命名字符有更多的规定。以下是&lt;a href=&quot;http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier&quot; title=&quot;W3C关于命名标识符的说明&quot;&gt;W3C关于命名标识符的说明&lt;/a&gt;中的内容：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In CSS, identifiers (including element names, classes, and IDs in selectors) can contain only the characters &lt;code&gt;[a-zA-Z0-9]&lt;/code&gt; and ISO 10646 characters U+00A0 and higher, plus the hyphen (&lt;code&gt;-&lt;/code&gt;) and the underscore (&lt;code&gt;_&lt;/code&gt;); they cannot start with a digit, two hyphens, or a hyphen followed by a digit. Identifiers can also contain escaped characters and any ISO 10646 character as a numeric code.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;意思是说，css中允许使用的命名字符，包括大小写英文字母、数字、连字符&lt;code&gt;-&lt;/code&gt;、下划线&lt;code&gt;_&lt;/code&gt;及其他ISO 10646字符集（等同于Unicode）中的字符。同时，起始字符部分不能是数字，或连续2个&lt;code&gt;-&lt;/code&gt;，或1个&lt;code&gt;-&lt;/code&gt;后接1个数字。此外，允许使用转义字符和任意ISO 10646字符的数字代码。&lt;/p&gt;

&lt;p&gt;经过测试，IE6对起始字符是下划线&lt;code&gt;_&lt;/code&gt;和单个连字符&lt;code&gt;-&lt;/code&gt;的情况，也会认定样式规则无效。&lt;/p&gt;

&lt;h2&gt;字符转义&lt;/h2&gt;

&lt;p&gt;可以看出，命名允许使用的字符其实是非常多的。但是，有一个地方需要注意，就是&lt;em&gt;特殊字符&lt;/em&gt;。特殊字符是指在css语法中，被认定用来表示特定含义的字符（相当于编程语言中的关键字）。例如，&lt;code&gt;...&lt;/code&gt;这样的class命名是不合法的，因为&lt;code&gt;.&lt;/code&gt;是css选择符中表示class的字符，因此不允许直接用在命名中（&lt;code&gt;...&lt;/code&gt;这位沉默着的class名你感觉如何？）。&lt;/p&gt;

&lt;p&gt;css中的特殊字符包含：&lt;code&gt;!&lt;/code&gt;, &lt;code&gt;&quot;&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;'&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;\&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;,&lt;code&gt;`&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;, 和&lt;code&gt;~&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这个时候，想要在命名中也加入这些特殊字符，就要使用&lt;em&gt;字符转义&lt;/em&gt;（&lt;em&gt;character escape&lt;/em&gt;）。字符转义通过反斜杠&lt;code&gt;\&lt;/code&gt;实现，在css选择符中，你可以通过在特殊字符前加&lt;code&gt;\&lt;/code&gt;的方法，取消特殊字符的特定含义，使其可以正确地被用于命名。例如，特殊字符&lt;code&gt;#&lt;/code&gt;就可以用&lt;code&gt;\#&lt;/code&gt;来表示。&lt;/p&gt;

&lt;p&gt;反斜杠&lt;code&gt;\&lt;/code&gt;的作用还不只如此。前面说到，任意ISO 10646字符都可以使用。按照ISO 10646的定义，所有的字符都可以用十六进制的代码来表示（尤其是一些不易直接输入的字符需要这样表示）。css语法中，以反斜杠&lt;code&gt;\&lt;/code&gt;开头，后接最多6位十六进制数字，即构成一个ISO 10646字符的代码。这和直接输入ISO 10646字符是一样的，但由于形式上是代码，因此是最可靠的。&lt;/p&gt;

&lt;p&gt;取消特殊字符的特定含义，除了前边的直接在前边加&lt;code&gt;\&lt;/code&gt;的写法外，还可以用ISO 10646代码。比如&lt;code&gt;#&lt;/code&gt;也可以用&lt;code&gt;\23&lt;/code&gt;或者&lt;code&gt;\000023&lt;/code&gt;表示。请注意，如果代码不满6位（前面几位是0），一定要在末尾留一个空格，这才能组成一个正确的ISO 10646代码（这个空格是分隔标识用，算作代码的一部分，不会引发选择符中的特殊含义）。如果不想有这个空格，请使用完整的6位十六进制代码。&lt;/p&gt;

&lt;p&gt;比如，下面是一个合法的命名示例。html：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;^_^&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;css中的定义：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;5E&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;5E&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的&lt;code&gt;^&lt;/code&gt;属于特殊字符，但通过代码写法后，就可以正确解析了。&lt;/p&gt;

&lt;p&gt;关于css字符转义的更多介绍，推荐你阅读&lt;a href=&quot;http://mathiasbynens.be/notes/css-escapes&quot; title=&quot;CSS character escape sequences&quot;&gt;CSS character escape sequences&lt;/a&gt;，这位作者还给了一个很有用的&lt;a href=&quot;http://mothereff.in/css-escapes&quot; title=&quot;CSS escapes&quot;&gt;转义工具&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;让命名更有趣&lt;/h2&gt;

&lt;p&gt;还需要提示一下的是，ISO 10646包含的字符，有很多即使看起来很奇特，但由于不是特殊字符，是可以直接输入的。尽管可能因为编辑器字体原因无法显示，但仍然有效。比如，html：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;♫&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;music on~&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对应css：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;♫&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mistyrose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;#333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对应的实际元素是（对的，我要证明这个写法有效！）：&lt;/p&gt;

&lt;div class=&quot;post_display&quot; &gt;
    &lt;div class=&quot;♫&quot;&gt;music on~&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;如果你想表示关于音乐内容的区域，这样字符图形也许可以说比英文单词更加符合语义。而更重要的是，这种写法更有趣！&lt;/p&gt;

&lt;p&gt;在使用这些字符的时候，请注意，css和html的编码都应使用utf-8。如果html是服务器端语言（比如php）生成的，则编码选项应设置为utf-8。&lt;/p&gt;

&lt;p&gt;关于如何找到各种字符，欢迎到Unicode查询站点&lt;a href=&quot;http://unicode-table.com/en/&quot; title=&quot;Unicode character table&quot;&gt;Unicode character table&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;看到这里，你是否已经想开始写点不一样的选择符命名呢？我已经试过一些↓&lt;/p&gt;

&lt;p&gt;html：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(・ρ・*)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(・ω・)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;css：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;・ω・\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;skyblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;・ρ・\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;aquamarine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以后觉得词不达意的时候，就用这种吧，一定可以给某个看你代码的人一个惊喜。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;实际地了解css语法对于命名标识符的规定后才知道，命名时原来还有如此多的空间可以发挥。一起试试更多的有趣的选择符吧！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>使用html5画布元素canvas绘制动画</title>
   <link href="http://acgtofe.com/posts/2013/08/canvas-animation"/>
   <updated>2013-08-14T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/08/canvas-animation</id>
   <content type="html">&lt;p&gt;html5新增的canvas无疑是一个非常出彩的设计。网页由此只需要引入一个html元素（正是&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;），即可进行图形绘制。相应地，flash动画是网页中一直以来很常见的内容，它的特色也是矢量图形绘制。因此，很容易联想到，是不是也可以用canvas来制作动画。&lt;/p&gt;

&lt;p&gt;canvas并不像flash那样是被设计为做动画的。但是，通过一定的方法，确实可以使用canvas制作出flash那样的图形动画，而且效果同样很棒。&lt;/p&gt;

&lt;h2&gt;动画的原理&lt;/h2&gt;

&lt;p&gt;动画的原理相信很多人也听说过，就是把绘制好的多张静态图，以一定的频率，按照一定的顺序依次切换显示，即形成动态的画面。当频率高于一定数值后，人眼就察觉不出切换的过程，这时也就形成了连贯的动画。同时，在同一场景（也称为分镜）中，相邻的静态图只会有微小差异，由此通过相当数量的静态图的组合创建过渡（一般称为动画分格），使画面平滑自然。&lt;/p&gt;

&lt;p&gt;在动画中，每一张静态图对应的静态画面，称为&lt;em&gt;帧&lt;/em&gt;。静态画面的切换频率，则称为&lt;em&gt;帧频&lt;/em&gt;。在flash的时间轴面板中，可以很容易找到它们。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201308/timeline_in_flash.png&quot; title=&quot;flash时间轴&quot; alt=&quot;flash时间轴&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;canvas动画的实现&lt;/h2&gt;

&lt;h3&gt;图形绘制&lt;/h3&gt;

&lt;p&gt;使用canvas绘图的做法是：先在html中加入&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;元素。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;drawing&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;400&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后，获取这个&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;元素对应的context（可以称为&lt;em&gt;绘图上下文&lt;/em&gt;）。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drawing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;drawing&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drawing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的变量&lt;code&gt;context&lt;/code&gt;表示的绘图上下文，是canvas图形绘制的核心，它有一系列的绘图属性和绘图方法。简单地说，所有的绘图都是操作这个&lt;code&gt;context&lt;/code&gt;实现。&lt;/p&gt;

&lt;h3&gt;动画中的图形&lt;/h3&gt;

&lt;p&gt;canvas的&lt;code&gt;context&lt;/code&gt;有一个&lt;code&gt;clearRect()&lt;/code&gt;方法，可以清除画布上的某一矩形区域内的所有图形。联系前文所述的动画的原理，可以知道，如果以某一频率不断地先清除，再绘制，而且每一次绘制的内容稍有不同，就可以看到变化的图形，形成动画。&lt;/p&gt;

&lt;p&gt;如何让每一次绘制的内容稍有不同呢？对此，较为合理的做法是，为需要绘制的图形，创建类，每一个类对应一种图形。任意一种图形，都有自己的一些属性，而且有一个属性指向canvas的绘图上下文。同时，图形类都定义了一个绘图方法&lt;code&gt;draw()&lt;/code&gt;（这只是我用的命名，可以自定），这个绘图方法&lt;code&gt;draw()&lt;/code&gt;包含了一系列代码，依次做以下两件事：依照当前的属性值（或者叫状态）操作绘图上下文把自己绘制在canvas画布上，以及更新当前属性值。&lt;/p&gt;

&lt;p&gt;比如，下面是可以移动的球体（其实就是圆）的类的定义：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 类定义，球体&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ball&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// X坐标&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Y坐标&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//  例如rgba(0,0,0,1)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 半径&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speedX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speedX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 水平方向速度&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speedY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speedY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 垂直方向速度&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 获取context的引用&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speedX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speedY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 绘图&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fillStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 移动，更新位置&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看出，每一次调用这个类的&lt;code&gt;draw()&lt;/code&gt;方法，都会把这个图形绘制上去。而每一次&lt;code&gt;draw()&lt;/code&gt;的调用，也会更新实例的属性值，从而使下一次绘制的时候，图形有所不同（这里的示例是位置的移动）。&lt;/p&gt;

&lt;h3&gt;舞台&lt;/h3&gt;

&lt;p&gt;在画布中以动画形式展现的图形，应该有一个元素对它们做管理。参考flash中的动画结构，这个元素就是舞台。因此，建立一个舞台类（Stage）。Stage类的定义是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stageWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stageWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 舞台宽&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stageHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stageHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 舞台高&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;playFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 播放标识，初始为false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 存放舞台中的元素&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 保存context的引用&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 添加舞台元素&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 移除舞台元素&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 渲染，绘制每一帧的舞台中有的所有图形&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clearRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stageWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stageHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 清除上一帧绘制的图形&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;childs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 调用舞台中的所有图形的draw()方法&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;playFlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thisReplace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;thisReplace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 循环调用&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 播放&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;playFlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;playFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 停止&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;playFlag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;playFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这段定义中，Stage类的&lt;code&gt;render()&lt;/code&gt;方法最为重要。&lt;code&gt;render()&lt;/code&gt;调用时，首先清除上一帧，然后通过一个循环，调用了舞台中的所有图形的&lt;code&gt;draw()&lt;/code&gt;方法，从而完成当前帧的绘图，并且更新了所有图形的属性值，由此确定了下一帧的所有图形的状态。然后通过一个对自身的循环调用，实现连续的逐帧绘制。这样，动画就产生了。&lt;/p&gt;

&lt;p&gt;连续逐帧绘制是需要参照一个频率的，一般会想到的就是使用&lt;code&gt;setTimeout()&lt;/code&gt;和&lt;code&gt;setInterval()&lt;/code&gt;。但是，现代浏览器考虑到动画实现的需要，专门为此提供了一个API，就是&lt;code&gt;requestAnimationFrame()&lt;/code&gt;。这个方法在不同浏览器下的写法不同，因此应该使用一个跨浏览器的动画运行控制函数：（来源于Paul Irish的&lt;a href=&quot;http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/&quot; title=&quot;requestAnimationFrame for Smart Animating&quot;&gt;requestAnimationFrame for Smart Animating&lt;/a&gt;）&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;webkitRequestAnimationFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mozRequestAnimationFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oRequestAnimationFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msRequestAnimationFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至于为什么应该使用&lt;code&gt;requestAnimationFrame()&lt;/code&gt;，请看&lt;a href=&quot;http://msdn.microsoft.com/zh-cn/library/ie/hh920765%28v=vs.85%29.aspx&quot; title=&quot;基于脚本的动画的计时控制&quot;&gt;基于脚本的动画的计时控制&lt;/a&gt;。简单的表述理由的话，就是“我们更专业”（￣∇￣）。&lt;/p&gt;

&lt;h3&gt;动画过程&lt;/h3&gt;

&lt;p&gt;在有了前面的类定义后，实现动画的方法就很明晰了。首先创建舞台和动画图形的实例，然后把动画图形实例通过舞台的&lt;code&gt;addChild()&lt;/code&gt;方法添加进去，然后调用舞台的&lt;code&gt;play()&lt;/code&gt;方法。这部分对应的代码示例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 假定stageConfig, ballConfig已有适当定义，context也已获得绘图上下文引用&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stageConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ball&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ballConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ball&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 添加到舞台（显示）&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 动画播放&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，canvas元素就开始了连贯的动态绘制，也就是能看到的动画了。每一帧的绘制过程可以表示如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201308/frame_render_process.png&quot; title=&quot;每一帧的绘制&quot; alt=&quot;每一帧的绘制&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到这里，希望你能够明白整个动画的实现过程。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;canvas动画在网页上可以有非常棒的效果。如果想体验一下canvas动画，你可以看看本博客内的&lt;a href=&quot;http://acgtofe.com/demo_pages/demos/brick-breaker/brick.html&quot; title=&quot;打砖块&quot;&gt;打砖块&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;期待在未来会有更多的关于canvas动画的作品。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>写给初学者的javascript知识</title>
   <link href="http://acgtofe.com/posts/2013/07/javascript-for-beginners"/>
   <updated>2013-07-18T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/07/javascript-for-beginners</id>
   <content type="html">&lt;p&gt;最初学习javascript时，我还没有想到它是一门包含丰富内容的独立程序设计语言。和过去可以找到的很多javascript教程中描述的一样，我对它的看法就是它对应于web网页的行为层，用于实现在网页中的各种交互效果。这的确是对javascript的正确描述，在如今看来也是。&lt;/p&gt;

&lt;p&gt;只是，这样的认识容易产生对javascript的低估。web领域的发展是迅速的，javascript也一样。javascript最初只是被设计为用来实现表单验证的客户端语言，现在你却可以看到有许多杰出的开发者使用它做出了非常出色的应用，而且已不再限于浏览器客户端的范围。这些都展现了javascript的巨大威力。因此，要以新的观念来看待javascript。&lt;/p&gt;

&lt;p&gt;javascript所包含的知识和内容是非常多的，即使只介绍基础部分，也远非一篇文章的篇幅可以做到的。因此，本文会较多地从轮廓的角度来描述知识点，但也会针对一部分内容做细节说明，希望对准备学习，或正在学习javascript的你有所帮助。&lt;/p&gt;

&lt;h2&gt;javascript是什么&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;javascript是一门程序设计语言&lt;/em&gt;。此外，在很多的地方，你都可以看到有描述称javascript是&lt;em&gt;灵活的&lt;/em&gt;（&lt;em&gt;flexible&lt;/em&gt;），这种灵活体现在javascript的语法和结构上（后文会有说明）。还有一个有趣的点是你可以看到javascript包含了java一词，但事实是它们之间几乎没有什么关系。&lt;/p&gt;

&lt;h2&gt;javascript可以做什么&lt;/h2&gt;

&lt;p&gt;在过去，javascript被认定为是一种由浏览器解释运行的客户端语言，因此存在一些固有限制，如javascript不能写服务器机器上的文件，某一网页中的javascript不能从来自另一个服务器的已经打开的网页中读取信息（很显然，这是为了用户安全）。如今，浏览器已经不是解释运行javascript的唯一环境，而且新的浏览器也在保证用户安全的基础上，考虑允许javascript实现更多的功能。在现在的web网页开发中，javascript可以实现的，可以说几乎包含了你可以想到的任何事情。&lt;/p&gt;

&lt;p&gt;javascript作为一门独立的程序设计语言，也已被应用到了更多领域。&lt;a href=&quot;http://commonjs.org/&quot; title=&quot;CommonJS&quot;&gt;CommonJS&lt;/a&gt;是一个项目团队，致力于为javascript创建可用于更广泛的应用程序编程的环境（提供运行环境和API），并制定规范。其宗旨是javascript: not just for browsers any more!。其目标是使javascript也可以像其他程序设计语言一样实现服务器端操作，命令行，文件读取等功能。比较有名的&lt;a href=&quot;http://www.nodejs.org/&quot; title=&quot;Node.js&quot;&gt;Node.js&lt;/a&gt;，可以看做是CommonJS的其中一部分的实现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201307/CommonJS_Logo.png&quot; title=&quot;CommonJS&quot; alt=&quot;CommonJS&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;如何使用javascript&lt;/h2&gt;

&lt;p&gt;在web网页开发中，javascript的引入是使用&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签，如果是在html中直接写，则是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The quick brown fox jumps over the lazy dog.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更常用的方式是写在单独的.js文件中（实际上，拓展名也不是必须的），然后通过&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签引用：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;example.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面两段代码中，&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;的&lt;code&gt;type&lt;/code&gt;属性不是必须的。出于性能优化的考虑，&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;最好放在页面代码最下部，也即&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;标签之前。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;是把代码加载和执行合并在一起的，每一段&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;都会在加载完成后立即执行（严格的说，是在不写&lt;code&gt;async&lt;/code&gt;和&lt;code&gt;defer&lt;/code&gt;属性的情况下）。&lt;/p&gt;

&lt;h2&gt;javascript中可以介绍的语法&lt;/h2&gt;

&lt;h3&gt;区分大小写&lt;/h3&gt;

&lt;p&gt;比如&lt;code&gt;yuki&lt;/code&gt;和&lt;code&gt;Yuki&lt;/code&gt;是两个不同的变量。&lt;/p&gt;

&lt;h3&gt;松散类型的变量&lt;/h3&gt;

&lt;p&gt;变量的声明是javascript代码中最常见的，使用关键字&lt;code&gt;var&lt;/code&gt;。javascript尤其特别的是，它的变量是&lt;em&gt;松散类型&lt;/em&gt;的。也就是说，任一声明的变量都可以存储任何类型的数据。这也一定程度上体现了javascript的高自由度。&lt;/p&gt;

&lt;p&gt;变量声明中，不使用&lt;code&gt;var&lt;/code&gt;也是有效的，但这样会一般造成定义额外的全局变量。根据javascript的最佳实践，全局变量应该尽量避免，因此在变量声明中一定要使用&lt;code&gt;var&lt;/code&gt;关键字。&lt;/p&gt;

&lt;p&gt;javascript中一共有5种简单数据类型（也称为&lt;em&gt;基本数据类型&lt;/em&gt;），和1种复杂数据类型（也称为&lt;em&gt;引用数据类型&lt;/em&gt;），如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;typeA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Undefined类型 这里写成 var typeA; 也是一样的&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;typeB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Null类型 空&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;typeC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Boolean类型 逻辑值&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;typeD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;twitter&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//String类型 字符串&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;typeE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Number类型 数字&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;typeF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Object类型 对象&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;typeG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;elem1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;elem2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Array类型 数组&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;typeH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Date类型 日期&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;typeI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^\stext\s$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//RegExp类型 正则表达式&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;typeJ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Function类型 函数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;像这样在变量初始化的时候通过初始值说明变量的数据类型，是一个好的实践。变量在未做初始化时，默认值为&lt;code&gt;undefined&lt;/code&gt;（未定义）。上面这段代码中，空行之上的正好对应5种基本数据类型，之下的都属于引用数据类型。你可能会惊奇下面看起来应该是多种类型，但事实上，它们虽然有不同，但都属于引用数据类型，即Object。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.crockford.com/&quot; title=&quot;Douglas Crockford&quot;&gt;Douglas Crockford&lt;/a&gt;在&lt;a href=&quot;http://javascript.crockford.com/private.html&quot; title=&quot;Private Members in JavaScript&quot;&gt;Private Members in JavaScript&lt;/a&gt;一文中提到：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;JavaScript is fundamentally about objects. Arrays are objects. Functions are objects. Objects are objects.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;意思是说，javascript是以Object为基础的语言，除基本数据类型外，其他所有的引用数据类型，本质上都是Object。&lt;/p&gt;

&lt;p&gt;函数是特殊的Object，通过关键字&lt;code&gt;function&lt;/code&gt;声明。它比Object多的一个功能是可以存储任意数量的语句，并且可以通过在函数名后加&lt;code&gt;()&lt;/code&gt;的形式调用，从而执行自身所存储的语句（而且可以传递任意数量的参数）。&lt;/p&gt;

&lt;h3&gt;理解Object&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Object是一组数据和功能的集合&lt;/em&gt;。一个简单的Object的示例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//和 new Object() 相同&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;yuki&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//属性&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//方法&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello! My name is &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;quot;yuki&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;quot;Hello! My name is yuki&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里&lt;code&gt;name&lt;/code&gt;是&lt;code&gt;myObject&lt;/code&gt;的一个属性，而&lt;code&gt;sayHello&lt;/code&gt;是它的一个方法。可以看到，访问属性，或者调用方法，都是通过点语法&lt;code&gt;.&lt;/code&gt;来实现的。这种使用方法你一定非常熟悉，jQuery就是全局创建了一个名为&lt;code&gt;jQuery&lt;/code&gt;（如果不冲突，还有别名&lt;code&gt;$&lt;/code&gt;）的Object，然后把所有的方法都定义在了这个Object中。&lt;/p&gt;

&lt;h3&gt;对象字面量&lt;/h3&gt;

&lt;p&gt;Object的定义还有一种方式，称为对象字面量表示法，它是定义Object的一种简写形式。比如前面的&lt;code&gt;myObject&lt;/code&gt;，用对象字面量表示法来写的话，是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;yuki&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello! My name is &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看出，这种写法是，从花括号&lt;code&gt;{&lt;/code&gt;开始，到花括号&lt;code&gt;}&lt;/code&gt;结束，通过 属性名：属性值 的形式，依次定义不同的属性。不同的属性之间以逗号&lt;code&gt;,&lt;/code&gt;分隔，但最后一个属性定义后面没有逗号。&lt;/p&gt;

&lt;p&gt;对象字面量被极多地运用于各类javascript库中，因为这种语法要求的代码量少，而且有封装数据的感觉，更受开发人员青睐。&lt;/p&gt;

&lt;p&gt;数据交换格式JSON（JavaScript Object Notation）的写法和对面字面量非常近似。比如下面这段JSON数据：（自动化工具&lt;a href=&quot;http://gruntjs.com/&quot; title=&quot;Grunt&quot;&gt;Grunt&lt;/a&gt;用到的&lt;code&gt;package.json&lt;/code&gt;配置文件）&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Test App&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;devDependencies&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;grunt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;~0.4.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;grunt-contrib-concat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;~0.1.1&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;和对象字面量相比，JSON对象还是有一些不同。JSON中没有声明变量，同时因为不是javascript语句，末尾没有分号。而且，JSON中，只能使用双引号（javascript中，字符串用单引号和双引号都是可行的），而且属性名也必须有双引号。&lt;/p&gt;

&lt;p&gt;虽然具有相同的语法形式，但JSON并不从属于javascript。关于JSON的更多信息，你可以阅读官方的&lt;a href=&quot;http://www.json.org/json-zh.html&quot; title=&quot;JSON&quot;&gt;JSON介绍&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;如何写javascript来实现功能&lt;/h2&gt;

&lt;p&gt;在学习javascript中，我们更关注的是如何实现一些想要的功能。一般来说，需要实现的功能都是&lt;em&gt;事件驱动&lt;/em&gt;（&lt;em&gt;Event Driven&lt;/em&gt;）的。在初期，这种功能实现会有一个常用的流程写法。jQuery设计的语法非常贴合这个流程。请看下面这个示例：&lt;/p&gt;

&lt;div class=&quot;post_display&quot; style=&quot;width:30px;height:30px;padding:5px;border:1px solid #aaa;&quot;&gt;
    &lt;div id=&quot;box&quot; style=&quot;width:30px;height:30px;background:#a1e466;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;框中的填充矩形会在点击后消失。对应的使用jQuery的javascript代码是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#box&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看出，实现一个事件驱动的功能分为三部分，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201307/elementary_procedure_of_event_driven.png&quot; title=&quot;事件驱动的功能的初级实现流程&quot; alt=&quot;事件驱动的功能的初级实现流程&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参照这样的逻辑，按照顺序写代码就可以实现初级的事件驱动。如果前面的功能使用原生javascript来实现，则是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//获取元素&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//为元素添加事件处理&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//事件处理内容：该元素不再显示， display = &amp;quot;none&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你可能会觉得原生javascript也并没有多复杂。这是因为这个示例的功能非常简单，而且没有触及存在浏览器兼容性差异的部分。jQuery提供的是简化的、方便的高层次接口，而为了做到这一点，jQuery实际在我们视线之外的区域做了很多复杂的工作，帮助处理原生javascript的浏览器兼容和功能不足等问题。因此，使用jQuery这类javascript库可以让我们的精力更好地集中在程序实现逻辑上。&lt;/p&gt;

&lt;h2&gt;完整的javascript实现的其他组成部分&lt;/h2&gt;

&lt;p&gt;前面所提到语法和实现属于javascript核心（称为ECMAScript，是一种语言标准）。除此以外，完整的javascript还包括另外两部分：&lt;em&gt;浏览器对象模型&lt;/em&gt;（&lt;em&gt;BOM&lt;/em&gt;）和&lt;em&gt;文档对象模型&lt;/em&gt;（&lt;em&gt;DOM&lt;/em&gt;）。&lt;/p&gt;

&lt;h3&gt;BOM&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;BOM&lt;/em&gt;（&lt;em&gt;Browser Object Model&lt;/em&gt;）提供了很多Object对象，用于访问浏览器的功能。其中核心对象是&lt;code&gt;window&lt;/code&gt;，javascript中的一些全局方法，如&lt;code&gt;setTimeout()&lt;/code&gt;、&lt;code&gt;alert()&lt;/code&gt;等，都是定义在&lt;code&gt;window&lt;/code&gt;对象上。&lt;/p&gt;

&lt;p&gt;比如下面一个使用BOM的示例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://acgtofe.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其功能是1s后跳转到其他网页。&lt;/p&gt;

&lt;h3&gt;DOM&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;DOM&lt;/em&gt;（&lt;em&gt;Document Object Model&lt;/em&gt;）已是W3C的一个推荐标准，为基本的文档结构和查询提供的接口，它本质上是独立于javascript的，不过，在javascript中可以而且经常需要使用它。&lt;/p&gt;

&lt;p&gt;DOM很容易理解，它描述的就是任何HTML或XML文档中的由各个节点构成的树形结构。比如下面这段HTML：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrapper&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Sample Title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Introduction.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对应的树形结构是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201307/dom_tree.png&quot; title=&quot;javascript错误信息&quot; alt=&quot;dom树形结构&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;javascript调试&lt;/h2&gt;

&lt;p&gt;javascript调试最常用的是全局方法&lt;code&gt;console.log()&lt;/code&gt;，可以用它输出想要跟踪查看的变量，或者单纯地输出一些字符串说明调试语句所在的代码段有没有被执行到。&lt;/p&gt;

&lt;p&gt;浏览器的开发者工具，在控制台中可以查看到当前页面的输出信息（通过&lt;code&gt;console.log()&lt;/code&gt;），以及javascript错误。错误信息还会说明错误位置（文件名，行，列），错误类别，错误说明。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201307/javascript_debug_in_firebug.png&quot; title=&quot;javascript错误信息&quot; alt=&quot;javascript错误信息&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Ajax&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Ajax&lt;/em&gt;（&lt;em&gt;Asynchronous JavaScript and XML&lt;/em&gt;）可以说是真正让javascript流行起来的原因。Ajax的技术核心是XMLHttpRequest对象，它使得javascript可以在任何时候和服务器进行通讯而不必刷新整个页面。&lt;/p&gt;

&lt;p&gt;比如服务器端的一个&lt;code&gt;test.php&lt;/code&gt;文件内容如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Here is the server.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实现Ajax的javascript代码（原生javascript需要较为繁琐的代码，因此这里使用了javascript库Mootools）：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;elem&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码所要做的是，获取&lt;code&gt;test.php&lt;/code&gt;返回的文本信息，然后把它写入到一个id是&lt;code&gt;elem&lt;/code&gt;的元素内。这个实例的效果是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201307/ajax_result.png&quot; title=&quot;Ajax实例效果&quot; alt=&quot;Ajax实例效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个简单的Ajax实例是为了说明，Ajax虽然概念看上去比较复杂，但理解起来是不难的。&lt;/p&gt;

&lt;h2&gt;进阶的javascript&lt;/h2&gt;

&lt;p&gt;要成为更专业的前端开发者，则需要对javascript有更深刻的认识和理解。javascript虽然能实现各种各样的功能，但只是初级的写法是难以应付更为复杂庞大的web应用的。很多直接按过程编写下来的代码（一般也称为硬编码 hard coded），会因为对情况的限定和依赖较强（高耦合），无法被复用。所以，在javascript的进阶学习阶段，需要考虑的就是编写可维护的javascript。看一下这段代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SuperType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;SuperType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SubType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SuperType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//使用时&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SubType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;AIR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码表述的是javascript的面向对象的程序设计（即非过程）中的组合继承。与它有关的概念对于javascript的初学者来说很有一定难度，但它们对于javascript模块化和独立复用有很大的帮助。如果你开始理解并使用它们，你会感受到javascript语言本身的独特魅力。前面说过javascript比较自由，而越是自由的程序设计语言，越能够体现程序编写者的出色的代码设计构思。&lt;/p&gt;

&lt;p&gt;对javascript有一定的功能实现的经验后，就应该学习&lt;em&gt;javascript设计模式&lt;/em&gt;。设计模式是针对程序设计语言中的各类问题的解决方案，可以帮助你了解专业的javascript代码是如何规划和设计的。如果你希望读懂jQuery这类javascript库的源码，就一定要懂得设计模式。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;看到这里，你可能会觉得这篇文章好像什么也没说。事实上，我在整理这些信息的时候，就确切的感到，javascript的知识真的是很多的，本文只是在尝试以一个全局的视野来描述这门程序设计语言。我也是javascript的学习者之一，所以这些也是我目前对javascript的理解。&lt;/p&gt;

&lt;p&gt;以后关于javascript的一些有趣的细节，我会再做详细的探讨。（目前肯定是还有很多待学习的点的... ￣▽￣ ）&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>琪娅和她的伙伴们 - 谈零之轨迹和碧之轨迹</title>
   <link href="http://acgtofe.com/posts/2013/06/ed-zero-and-ed-ao"/>
   <updated>2013-06-13T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/06/ed-zero-and-ed-ao</id>
   <content type="html">&lt;p&gt;阅读本文时推荐搭配下面的音乐(・ω・)。（Original Soundtrack 零の軌跡）&lt;/p&gt;

&lt;div class=&quot;post_display&quot; style=&quot;height:24px;&quot;&gt;
    &lt;audio src=&quot;http://acgtofe.qiniudn.com/%E9%9B%B6%E3%81%AE%E8%BB%8C%E8%B7%A1.mp3&quot; preload=&quot;auto&quot; loop&gt;&lt;/audio&gt;
&lt;/div&gt;


&lt;p&gt;我是在等到碧之轨迹也出了PC中文版之后，把两作连在一起玩完的。这样无间断地把两作一同讲述的这个连续的，很有一定长度的完整的故事读完，感觉非常棒。&lt;/p&gt;

&lt;p&gt;作为一个游戏而言，零之轨迹和碧之轨迹沿用的是前作空之轨迹的游戏引擎，因此在画面和游戏体验上有高度的一致性。这个游戏引擎创造的画面在如今的游戏界其实很不够看，但游戏的品质从来就不只是由这些决定的。对于我这样的（以及更多的）轨迹系列的fans而言，“延续”下去的故事就是最重要的。&lt;/p&gt;

&lt;p&gt;轨迹系列有自己完整的游戏内的世界，而且从一开始，轨迹系列就以细腻的剧情令这个世界充满着迷人的魅力。简单的说，轨迹系列是很大的“坑”，但跳下去后读到故事却感到很有价值，并像期待小说和漫画连载一样期待着故事的后续。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/kiseki_logos.jpg&quot; title=&quot;零之轨迹和碧之轨迹&quot; alt=&quot;零之轨迹和碧之轨迹&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;零之至宝的故事&lt;/h2&gt;

&lt;p&gt;空之女神的七至宝是轨迹系列的故事中非常重要的内容。零之轨迹和碧之轨迹所提及的是幻之至宝，但幻之至宝的命运就和前作的空之至宝辉之环很不相同，拥有心灵的幻之至宝在历史途中即以自己的意志选择了自我毁灭。而后来的人们并没有考虑幻之至宝毁灭的原因，并设法重现至宝。这个人造至宝的完成品，就是零之至宝琪雅。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/kea_meet.jpg&quot; title=&quot;与琪雅的相遇&quot; alt=&quot;与琪雅的相遇&quot; /&gt;&lt;/p&gt;

&lt;p&gt;零之至宝在原有的幻之力的基础上，还拥有操纵时空的能力，这也成为整个故事的伏笔的关键。在零之轨迹刚开始游戏时的那一小段像梦境一样的经历，直到碧之轨迹终章的结尾才点明。虽然开始会觉得有些莫名其妙，但到一切都明白之后，又会深感是故事上的一个精巧的设定。&lt;/p&gt;

&lt;p&gt;零碧的故事舞台是塞姆里亚大陆西部的克洛斯贝尔自治州。克洛斯贝尔如今已是大陆数一数二的金融和贸易中心，经济实力十分强劲。但对应的，克洛斯贝尔位于埃雷波尼亚帝国和卡尔瓦德共和国这两个大国之间，并不断受到两大国的干涉，政治根基脆弱，局势也很不稳定。同时，黑社会和政治家相互勾结，在看似繁荣的城市背后，有着许多令人担忧的地方。正是在这样的情况下，克洛斯贝尔警察局新设立了部门-特别任务支援科，主角们即成为了这个部门最初的成员，然后投身到保护市民安全，响应市民请求的身为警察的工作中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/bus_waiting.jpg&quot; title=&quot;等待公共汽车中...&quot; alt=&quot;等待公共汽车中...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;相比空之轨迹具有幻想色彩的故事，零碧的故事要“现实”许多，包含了政治斗争、黑社会等因素。而身为警察的罗伊德一行人在应对支援请求（果然还是要做和游击士一样的事啊！）的同时，还会对信息和情况做很多推理，并让玩家来做选择。虽然做侦探的感觉很不错，但RPG的收集要素可是会告诉你，选项选错可是会掉DP的！想要达成一些成就的话，还是求助攻略吧...&lt;/p&gt;

&lt;p&gt;琪雅的确是零碧的核心（零表示作为零之至宝的琪雅，碧表示琪雅的印象色），但在事件发展进程上，真正推动故事进展的，我觉得还是在于克洛斯贝尔自治州这个特定的环境。这种处于两大国之间的困境，每一个热爱着克洛斯贝尔的人都会想着要如何解救克洛斯贝尔，并把克洛斯贝尔变得更好。我们所能看到的，就是零碧所讲述的罗伊德一行人为此所做的努力。而与此同时，罗伊德一行人也经历了与琪雅相遇、成为琪雅的监护人、保护并最终救回琪雅的过程。即使最后还因此陷入了克洛斯贝尔独立战争，但对罗伊德一行人来说，让琪雅像一个普通女孩和同伴们一起，才是正确的做法。本来世上就没有令所有人满意的选项，我们应做的是由自己来决定未来。&lt;/p&gt;

&lt;h2&gt;形形色色的人物&lt;/h2&gt;

&lt;p&gt;特别任务支援科绝对是一个神奇的组织。从一开始就聚在了一起的主角众人，每一位都有着各自的深厚背景和个性。不过，从活跃在各个事件中屡次立功的特别任务支援科的成绩看，正是因为是这样一群各有千秋的角色，特别任务支援科才能一次一次完成那么多困难的任务。&lt;/p&gt;

&lt;p&gt;罗伊德这位呢，约纳留下的一句话最适合描述了：“你这个伪装成温和无害的娃娃脸，实际上却四处拈花惹草的人生赢家！”事实证明，这句话深得玩家的共鸣...罗伊德是一个老好人（艾斯蒂尔也是！），很关心别人，总是能在适当的时候给予同伴鼓舞。而罗伊德作为一号男主，更厉害的一点是在特定的时候所展现出的惊人的分析和推理能力。虽说罗伊德平时就是处处留情而且毫无自知之明，但在关键的时候，却总能分析出正确的结论，带领大家继续行动。（所以这才是主角和队长啊！）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/lloyd_impression.jpg&quot; title=&quot;零碧中最受玩家喜欢的台词-出自罗伊德&quot; alt=&quot;零碧中最受玩家喜欢的台词-出自罗伊德&quot; /&gt;&lt;/p&gt;

&lt;p&gt;艾莉是市长的孙女，身为大小姐却给人平易近人的亲切感。艾莉相比罗伊德在很多方面都要懂得更多，因此也常常斜眼看着罗伊德吐槽他（比如没节操什么的= =）。有些地方也多亏艾莉的帮助，才成功见到一些较有权势的人，渐渐化解挡在面前的壁垒（官二代在是必须的！）。艾莉人很善良，但会在一些细微的点上腹黑一下，众所周知的艾莉的“微笑”审讯，绝对立竿见影。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/elie_impression.jpg&quot; title=&quot;艾莉的“微笑”&quot; alt=&quot;艾莉的“微笑”&quot; /&gt;&lt;/p&gt;

&lt;p&gt;缇欧是队伍里年龄最小的成员，极少露出笑容，在面部表情上显得很“三无”，但话却不少，而且很喜欢吐槽。而实际上缇欧内心温柔，也非常重视同伴。她在导力网络技术上的实力（黑客，也包括玩波波碰这种游戏...）为支援科带来了很有力的帮助。缇欧很喜欢说“好麻烦”（零碧的战斗开始时经常有），而在提到与咪西有关的话题后会立即变得非常健谈。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/tio_impression.jpg&quot; title=&quot;恭喜你们，罗伊德前辈，艾莉前辈。&quot; alt=&quot;恭喜你们，罗伊德前辈，艾莉前辈。&quot; /&gt;&lt;/p&gt;

&lt;p&gt;兰迪是队伍里的大哥，一直给人一种“轻浮”的感觉，擅长各类与夜店有关的技巧，比如赌博、飞镖。同时为人诚实，明确地表示自己喜欢比自己年龄大的漂亮姐姐（真的很诚实的！）。实际上则是非常可靠，对队伍里的其他人照顾有加，在需要的时候会勇敢站出来为大家做掩护
，并敢于担当。完全展现了实力的兰迪则非常帅气，最终S技“狂战士”绝对是华丽丽的视觉效果！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/randy_impression.jpg&quot; title=&quot;如此符合兰迪喜好的塞茜尔却...&quot; alt=&quot;如此符合兰迪喜好的塞茜尔却...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;琪雅外观看上去是9岁左右的小女孩，虽然失去了记忆，但表现得十分乐观开朗，人见人爱。被特别任务支援科的各位收留后不久，就已经和身边的人都混得很熟。可能因为零之至宝的力量的缘故，琪雅非常聪明，可以很快地掌握一些知识和技巧（比如烹饪，第一次尝试后就从此可以为罗伊德一行人做饭了）。琪雅非常喜欢罗伊德他们，并在心里也产生了要“保护罗伊德他们”的想法。现在看来，也许正是因为琪雅的这种想法，才会有零碧这种种的故事吧...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/kea_impression.jpg&quot; title=&quot;前来送行的琪雅&quot; alt=&quot;前来送行的琪雅&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这几位最主要的角色以外，还有很多非常有个性的配角，比如非常喜欢缇欧的游击士艾欧莉娅（如果下一作还出现的话请务必加上头像！），结尾的 ❤ 是不是一下子就让语气很不同了？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/others_impression_1.jpg&quot; title=&quot;游击士艾欧莉娅&quot; alt=&quot;游击士艾欧莉娅&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分布在游戏内各个场景的NPC，也不只是简单的NPC。这也是轨迹系列一直以来的在细节上认真的地方。每名NPC都有自己的背景和故事，他们并不会固定在一个场景，随着游戏流程的进行，各个NPC人物可能会出现在不同的地方，而且会有不同的对话（更新频率很快，而且有些可以反映出目前所处的故事时间线位置）。所以，这些NPC就是在以一个可能是旁观者的身份，活跃着，和玩家一同见证着这块大陆上的故事。想要更多地了解这个世界，就请多从NPC那里打听。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/others_impression_2.jpg&quot; title=&quot;活跃的NPC&quot; alt=&quot;活跃的NPC&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;觉得印象深刻很想提一下的地方&lt;/h2&gt;

&lt;p&gt;碧之轨迹为新的战术导力器增加了“核心回路”系统，实际用起来，尤其觉得其搭配的核心魔法非常好用。而且，发动核心魔法的卡片也非常精美！下图中从左到右依次是地、水、火、风、时、空、幻（七曜属性）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/seven_cards.jpg&quot; title=&quot;七属性的核心魔法卡片&quot; alt=&quot;七属性的核心魔法卡片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;零碧虽然是新的主角，新的故事，但前作空之轨迹中的角色却也巧妙地安排到了零碧的故事中。一切都是在告诉我们：这就是你熟悉的轨迹中的世界！（所以历代主角互相认识是个定律么...）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/familiar_friends.jpg&quot; title=&quot;几个拥有相同朋友的人的愉快的闲聊&quot; alt=&quot;几个拥有相同朋友的人的愉快的闲聊&quot; /&gt;&lt;/p&gt;

&lt;p&gt;钓鱼仍然是轨迹系列里休闲活动的代表，碧轨里的钓杰四天王不仅有不错的实力，还有着充分的自信，比如这位龙宫辉夜...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/fishing_special.jpg&quot; title=&quot;哦呵呵!哦呵呵呵!呵呵呵……&quot; alt=&quot;哦呵呵!哦呵呵呵!呵呵呵……&quot; /&gt;&lt;/p&gt;

&lt;p&gt;越狱这一段令我非常震撼，这样和过去的敌人一同并肩作战，而且还全程搭配了超燃的音乐！(音乐名是Inevitable Struggle，非常推荐！)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/prison_break.jpg&quot; title=&quot;无装备无魔法2vN!&quot; alt=&quot;无装备无魔法2vN!&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;轨迹系列的之后&lt;/h2&gt;

&lt;p&gt;结社“噬身之蛇”的计划实施在轨迹系列的整个主线故事中有很强的引导作用。碧之轨迹中涉及的结社的幻焰计划，实则分为两部分，幻指幻之至宝，实施地点就在克洛斯贝尔，而焰的部分将会在埃雷波尼亚帝国展开。到碧轨结束，玩家也触及不到这整个计划的全貌。&lt;/p&gt;

&lt;p&gt;很令人期待的是，接下来的“闪之轨迹”的故事正设定在了埃雷波尼亚帝国，但从轨迹系列的一贯安排来看，是否在闪之轨迹这一作就继续涉及结社的计划，还是很难说的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201306/tio_sd.jpg&quot; title=&quot;我就看看...&quot; alt=&quot;我就看看...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外，碧轨也是falcom用这个古老的引擎做的最后一款游戏了（仅限轨迹系列），接下来的闪之轨迹会使用PS3级别的游戏引擎，同时角色会用真人比例的3D人物模型（其实轨迹系列的Q版人物模型也很好看的！），不知道又会给玩家带来怎样不同的印象。等到时候玩到游戏，我会再来发表一下感受，敬请期待。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>像素与浏览器视口的细节</title>
   <link href="http://acgtofe.com/posts/2013/05/pixel-and-viewport"/>
   <updated>2013-05-31T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/05/pixel-and-viewport</id>
   <content type="html">&lt;p&gt;初学网页制作，很常见的做法就是找各种线上的网页，然后查看源代码，参考学习这些网页是如何实现自己的设计的。而对我来说，我印象最深的一个知识点，是这样的：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrapper&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;980px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个在现在来看，其实就是经典的固定宽度的网页布局。不过，以前的时候，我并不知道为什么这样做就可以。当时的理解是：一个定宽，水平居中的容器，来容纳网页的主体内容，就可以使网页能在不同分辨率的显示屏都有相对较好的表现。而对于浏览器窗口这样一个摆放网页的“物件”，还有相当一些未理解的地方。&lt;/p&gt;

&lt;p&gt;网页布局并不只有这一种做法。不像这样简单地使用一个固定宽度的外层容器，同样可以做出在各种状况下都有较好表现的网页。不过，这种时候，就需要对页面布局原理有更深的了解，从而准确地控制好网页元素，保证按照预定的方式显示。&lt;/p&gt;

&lt;p&gt;本文将介绍像素及浏览器视口的概念，并解释说明与它们相关的，前端开发应理解的要点细节。本文主要参考了quirksmode.org上的&lt;a href=&quot;http://www.quirksmode.org/mobile/viewports.html&quot; title=&quot;A tale of two viewports&quot;&gt;A tale of two viewports&lt;/a&gt;，在这里非常推荐你也阅读一下（注意，这篇文章分为两部分）。&lt;/p&gt;

&lt;h2&gt;从像素开始&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;像素&lt;/em&gt;（&lt;em&gt;Pixel&lt;/em&gt;）是数字图像的最小组成单元，它不是一个物理尺寸，但和物理尺寸存在一个可变的换算关系（物理尺寸之间的换算是固定的）。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PPI&lt;/em&gt;（&lt;em&gt;Pixel Per Inch&lt;/em&gt;）是指每英寸包含的像素数，同时也是针对这个换算关系的一个描述性指标。其中的英寸（Inch）和厘米（cm）、毫米（mm）等尺寸一样，都属于物理尺寸。不同的显示设备会有不同的PPI，因此，每一个像素点的物理尺寸（可以理解为你如果能拿刻度尺来量的话，得到的数值），也会因为设备的不同而存在差异。一般来说，越高的PPI，相当于在单位物理尺寸内用了更多、更小的像素点来显示图像，因此会更清晰。&lt;/p&gt;

&lt;p&gt;在Photoshop中，对图像大小的表示，有“像素大小”以及“文档大小”两个区域，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201305/photoshop_image_size.png&quot; title=&quot;Photoshop中的图像大小&quot; alt=&quot;Photoshop中的图像大小&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你也许注意过，这里无论改写哪个区域的数值，另一个区域的数字也会相应变化。因此，像素大小和文档大小只是在用不同的方式，表达同一图像的尺寸信息。任何时候，它们之间都可以用“分辨率”数值（比如这里是PPI）进行换算。&lt;/p&gt;

&lt;p&gt;与PPI类似的，还有一个&lt;em&gt;DPI&lt;/em&gt;（&lt;em&gt;Dot Per Inch&lt;/em&gt;），是指每英寸打印的点数，表示了打印机的打印精度，是属于印刷行业的概念。但如今随着数字化的输入输出设备的发展，很多人也把数字图像的解析度用DPI来表示。严格来说，印刷时计算的网点和电脑显示器的显示像素并不相同，但现在已普遍认同，数字图像显示屏的信息，用DPI或PPI表示均可行，是相同的含义。&lt;/p&gt;

&lt;h2&gt;设备像素与css像素&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;设备像素&lt;/em&gt;（&lt;em&gt;device pixels&lt;/em&gt;）是指与硬件设备直接相关的像素，是真实的屏幕设备中的像素点。比如说，一个电脑显示器的参数中，最佳分辨率是1920x1080，那么指的就是这个显示器在屏幕上用于显示的实际像素点，也就是设备像素。&lt;/p&gt;

&lt;p&gt;另一个概念是&lt;em&gt;css像素&lt;/em&gt;（&lt;em&gt;css pixels&lt;/em&gt;）。css像素是指网页布局和样式定义所使用的像素，也就是说，css代码中的px，对应的就是css像素。那么，css像素和设备像素有什么区别呢？简单地说，css像素比设备像素要更“虚拟”一些。下面来解释这一点。&lt;/p&gt;

&lt;p&gt;在桌面电脑上，浏览器有一个很少使用的功能：&lt;em&gt;缩放&lt;/em&gt;。比如下边这个矩形元素，宽度是128px，高度是40px。显然，这里的尺寸是css像素。&lt;/p&gt;

&lt;div class=&quot;post_display&quot;&gt;
    &lt;div style=&quot;width:128px;height:40px;background:#38a1ff;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;然后，缩放本页（&lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;+&lt;/code&gt; 或 &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;-&lt;/code&gt;），注意一下，你看到了什么？&lt;/p&gt;

&lt;p&gt;矩形元素的css像素尺寸没有变化，同样，你的显示器的设备像素尺寸也不会变化。但是，放大后，元素看起来变大了，在你的屏幕上占据了更大的空间。对应地，如果是缩小，则元素看起来变小了，在屏幕上占据的空间也变小了。&lt;/p&gt;

&lt;p&gt;css像素和设备像素之间是一种可变的转化关系。&lt;em&gt;在100%缩放比例下，1个css像素等于1个设备像素&lt;/em&gt;。在表示某一数目的css像素时，在放大状态下使用了更多的设备像素，而在缩小状态下使用了更少的设备像素。这就是css像素和设备像素的概念。&lt;/p&gt;

&lt;p&gt;对前端开发来说，设备像素没有意义，我只会关心css像素。只有css像素才描述了网页的布局与外观，我只需要让我的网页在100%缩放比例下看起来不错就可以了。&lt;/p&gt;

&lt;p&gt;在css中，大部分人都习惯于使用&lt;code&gt;px&lt;/code&gt;作为元素宽度或高度定义的单位。css中可也可以使用其他单位，比如&lt;code&gt;in&lt;/code&gt;英寸这样的物理尺寸单位。联系前文的内容，你一定会困惑这些单位的关系。css是这样做的：如果你使用&lt;code&gt;in&lt;/code&gt;这类物理尺寸，它会直接转化为css像素。这个转化关系是固定的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1in == 96px 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于css单位的详细内容，你可以阅读CSS-Tricks上的&lt;a href=&quot;http://css-tricks.com/the-lengths-of-css/&quot; title=&quot;The Lengths of CSS&quot;&gt;The Lengths of CSS&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;视口&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;视口&lt;/em&gt;（&lt;em&gt;viewport&lt;/em&gt;），指的是浏览器窗口中用来显示网页的区域。以桌面电脑的浏览器来说，就是浏览器窗口除去标题栏，菜单栏，地址栏，状态栏等等浏览器的“周边”的东西后剩余的区域。&lt;/p&gt;

&lt;h3&gt;桌面电脑中的视口&lt;/h3&gt;

&lt;p&gt;桌面电脑中的视口，一般来说是这样的印象：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201305/viewport_on_desktop.jpg&quot; title=&quot;桌面电脑中的视口&quot; alt=&quot;桌面电脑中的视口&quot; /&gt;&lt;/p&gt;

&lt;p&gt;视口是存在着一些特性的，要讨论它，就要分析&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;这两个元素。&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;是任何网页都必然存在的元素，但它们的表现及特性却很少被提及。现在，通过一个例子来说明。&lt;/p&gt;

&lt;p&gt;假设&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;有一个做自适应布局的直接子元素，比如说侧边栏，定义了&lt;code&gt;width:20%&lt;/code&gt;，然后调整浏览器窗口大小，你会看到元素会相应做尺寸调整（如果你用前端工具查看，可以看到元素的宽度的计算值，也即css像素，是变化的），始终在视口中占据20%的宽度（这里也假定所有元素都没有内外边距和边框）。这是如何做到的？&lt;/p&gt;

&lt;p&gt;可以想到，侧边栏的20%是取了父级元素，也就是&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;的宽度值。那&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;有多宽呢（没有给它定义宽度）？显然，&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;作为块元素，会取父元素，也就是&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;的100%宽度值。最后一个问题，&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;有多宽？是的，同样，&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;作为块元素，会再依照一个宽度值取100%，这个宽度值就是视口的宽度。&lt;/p&gt;

&lt;p&gt;因此，可以理解为，视口表现得像是&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;之上的一个块元素，它限制并确定&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;的宽度，但却不属于html结构，不能被设置样式。而且，任何时候，视口的尺寸都会随着浏览器窗口的大小变化而变化。桌面电脑中的视口，就是这样的一个概念。&lt;/p&gt;

&lt;p&gt;也许，你见过这样的问题：在全屏状态下看起来不错的网页，如果调整为一个比较小的浏览器窗口，然后再在这个时候拖动一下横向的滚动条，就会有不协调的地方。比如下图这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201305/viewport_trouble.jpg&quot; title=&quot;较小的视口时有可能存在的问题&quot; alt=&quot;较小的视口时有可能存在的问题&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在，联系一下视口与网页中的元素之间的显示关系，就可以知道原因了。在这样浏览器窗口较小的时候，视口较小，&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;也受视口影响，宽高变得比较小，而带背景图或背景色的元素是取父元素的100%宽度，因此，会只有这样的宽度。&lt;/p&gt;

&lt;p&gt;这里会出现问题，也是因为有其他网页元素定义的宽度超过了此时的&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;的宽度，从而使一部分元素在水平方向上出现在了视口之外。如果要解决这个问题，为带背景图或背景色的元素，定义一个最小宽度即可。&lt;/p&gt;

&lt;h3&gt;手机中的视口&lt;/h3&gt;

&lt;p&gt;相比桌面电脑，在手机上浏览网页，最大的差异在于屏幕尺寸。如果你拿手机来看一个平时用桌面电脑浏览的网页，那么一定会经历下面两种状态：页面被缩小，以至于文字无法阅读，或者处于适中的缩放比例，但只显示了整个网页的一小部分。&lt;/p&gt;

&lt;p&gt;手机浏览器的供应商致力于让用户在手机上也获得最佳的网页浏览体验，这也是说，要让手机浏览网页的体验能够“尽可能地和桌面电脑相同”。&lt;/p&gt;

&lt;p&gt;然后，手机浏览器的供应商是这么考虑的：由于手机屏幕的宽度对于css网页布局来说太小，为了让更多的网页能正常显示（一些流体布局的网页会在过窄的视口中变得一团乱），应该让视口更宽，超越屏幕的宽度。所以，在手机浏览器中，视口被划分为了两个：&lt;em&gt;可见视口&lt;/em&gt;（&lt;em&gt;visual viewport&lt;/em&gt;）和&lt;em&gt;布局视口&lt;/em&gt;（&lt;em&gt;layout viewport&lt;/em&gt;）。&lt;/p&gt;

&lt;p&gt;可见视口是指当前在手机屏幕上显示的部分。当你做缩放的时候，可见视口的尺寸（css像素值）也会变化。如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201305/visual_viewport_on_mobile.jpg&quot; title=&quot;手机上的可见视口&quot; alt=&quot;手机上的可见视口&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和可见视口不同，布局视口用于元素布局和尺寸计算（比如百分比的宽度值），而且比可见视口明显要更宽。无论你缩放，或者滑动页面，甚至翻转手机屏幕，布局视口始终不变。前文介绍过&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;元素会取视口的宽度值，在手机上，这个限定和确定&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;的是布局视口。这就是手机浏览器在处理时和桌面电脑浏览器不一样的地方，而这个布局视口的引入，保证了网页在手机里中的显示与在桌面电脑上的一致。&lt;/p&gt;

&lt;p&gt;布局视口的宽度是由手机浏览器定义的，随浏览器不同而不同。比如Safari是980px，Android   Webkit是800px。这都远比屏幕宽度值要大。&lt;/p&gt;

&lt;p&gt;你可以做一个测试：写一个整体只有300px宽的网页，但不针对手机做任何处理（也就是代码写法和桌面电脑网页一样），然后用手机打开。你会看到，即使页面内容没有超过手机屏幕宽度，页面仍然会被大比例缩小，就好像这个页面“是一个很宽的桌面电脑网页”。这个测试可以说明布局视口的存在。&lt;/p&gt;

&lt;h3&gt;更改手机中的布局视口&lt;/h3&gt;

&lt;p&gt;手机中的布局视口是可以更改的。你一定在很多移动版网页中见到过下边这个&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;标签元素。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是最早由Safari引入，但如今已普遍被各类手机浏览器认可了的一项设置。这其中有一句&lt;code&gt;width=device-width&lt;/code&gt;，它的意思是，把手机浏览器的布局视口的宽度，更改为当前设备的宽度。你还可以使用&lt;code&gt;width=500&lt;/code&gt;这样的具体数值（也是css像素值）。总的来说，使用这个&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;标签元素，就可以告诉手机浏览器当前页面应该使用的布局视口的尺寸。&lt;/p&gt;

&lt;p&gt;关于这个viewport meta tag的更多信息，你可以阅读Mozilla开发团队写过的&lt;a href=&quot;https://developer.mozilla.org/en/mobile/viewport_meta_tag&quot; title=&quot;Using the viewport meta tag to control layout on mobile browsers&quot;&gt;关于viewport meta tag的文章&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;与媒体查询的关系&lt;/h2&gt;

&lt;p&gt;css中的&lt;code&gt;@media&lt;/code&gt;媒体查询可以根据尺寸信息分别定义不同的css。其中，可用的值有2种，&lt;code&gt;width/height&lt;/code&gt;和&lt;code&gt;device-width/device-height&lt;/code&gt;。这两种尺寸信息有什么区别呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;width/height&lt;/code&gt;使用的是视口的尺寸值，如果是手机，则是布局视口的尺寸值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;device-width/device-height&lt;/code&gt;使用的是设备屏幕的尺寸值。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;在桌面电脑上，如果你写：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:600px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/*特定样式，只在宽度不大于600时有效*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么，只需要调整浏览器尺寸到一定程度，你就可以看到这部分特定样式生效后的效果。但是，如果把这里的&lt;code&gt;max-width&lt;/code&gt;换成&lt;code&gt;max-device-width&lt;/code&gt;，那么，无论做什么，都无法看到这部分特定样式生效，因为整个显示器的宽度是不会变化的。因此，在桌面电脑上，你只需要使用&lt;code&gt;width&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;而在手机上，如果网页有前面说的&lt;code&gt;width=device-width&lt;/code&gt;的定义（目前几乎所有移动版网页都做了这样的定义），那么使用&lt;code&gt;width&lt;/code&gt;和&lt;code&gt;device-width&lt;/code&gt;是相同的。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;由像素及浏览器视口引入的相关知识还有不少，本文受限于篇幅（如果太长了我实在觉得不能拿来看...（ ﾟ口ﾟ）），只以尽可能明确的方式，介绍了主要的部分。如果有任何疑惑的地方，欢迎讨论。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>css进阶 - 从选择符开始</title>
   <link href="http://acgtofe.com/posts/2013/05/better-css-selectors"/>
   <updated>2013-05-20T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/05/better-css-selectors</id>
   <content type="html">&lt;p&gt;在我最早开始写css的时候，其代码上的高自由度就一直很令我困惑。这就是说，同一个设计，如果让不同的人来实现，最终的代码一定是有差异的。但这存在一个问题，如果不同的人通过不同的方法以及代码风格，都从外观上实现了一样的设计，将很难评价谁做得更好。想来也是，既然都实现了设计，达到了目的，css这种没有程序逻辑的代码中，又能找出什么来说明谁做得更出色呢？&lt;/p&gt;

&lt;p&gt;而如今，我认同的观念是，css这种描述性语言，仍然有着代码上的质量评判。评判标准就是&lt;em&gt;可维护性&lt;/em&gt;（&lt;em&gt;Maintainability&lt;/em&gt;）和&lt;em&gt;性能&lt;/em&gt;（&lt;em&gt;Performance&lt;/em&gt;），用比较通俗的话说，好的css，要对开发者的工作友好（dev-friendly），也要对浏览器友好（browser-friendly）。 本文将说明如何从css选择符的角度来提高css代码质量。&lt;/p&gt;

&lt;h2&gt;关键选择符与浏览器的样式规则匹配原理&lt;/h2&gt;

&lt;p&gt;css选择符的概念，在之前的&lt;a href=&quot;http://acgtofe.com/posts/2013/04/css-specificity-explain-in-detail/&quot; title=&quot;css优先级详细解析&quot;&gt;css优先级详细解析&lt;/a&gt;的开头部分也有提到，是指每一条样式规则中，描述把样式作用到哪些元素的部分，也即&lt;code&gt;{}&lt;/code&gt;之前的部分。在本文，还要额外介绍一个概念：&lt;em&gt;关键选择符&lt;/em&gt;（&lt;em&gt;Key selector&lt;/em&gt;）。关键选择符就是在每一条样式规则起始的&lt;code&gt;{&lt;/code&gt;之前的最后一个选择符，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201305/key_selector_explain.png&quot; title=&quot;css关键选择符&quot; alt=&quot;css关键选择符&quot; /&gt;&lt;/p&gt;

&lt;p&gt;css选择符将确定后面的属性定义要作用到哪些元素,因此存在一个浏览器根据css选择符来应用样式到对应元素的匹配过程。关于浏览器的样式匹配系统，David Hyatt在&lt;a href=&quot;http://www.mozilla.org/xpfe/goodcss.html&quot; title=&quot;Writing Efficient CSS&quot;&gt;Writing Efficient CSS for use in the Mozilla UI&lt;/a&gt;一文中提到了以下内容：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The style system matches a rule by starting with the rightmost selector and moving to the left through the rule’s selectors. As long as your little subtree continues to check out, the style system will continue moving to the left until it either matches the rule or bails out because of a mismatch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;意思是说，浏览器引擎在样式匹配时，以&lt;em&gt;从右向左&lt;/em&gt;的顺序进行。在具体匹配某一条样式规则时，这个从右向左的过程会一直持续，直到读取完整个选择符序列并完成匹配，或因某一个地方的不匹配而取消（然后转到另一条样式规则）。&lt;/p&gt;

&lt;p&gt;至于为什么浏览器会选择这样的匹配顺序，你可以看看&lt;a href=&quot;http://stackoverflow.com/questions/5797014/why-do-browsers-match-css-selectors-from-right-to-left&quot; title=&quot;Why do browsers match CSS selectors from right to left?&quot;&gt;Stack Overflow上的相关讨论&lt;/a&gt;。大致上解释一下的话，由于最右边的关键选择符直接表示了样式定义应作用的元素，所以从右向左的顺序更利于浏览器在初始匹配的时候就确定有样式定义的元素集合，并更快地在找某一个元素的样式时避开大多数实际没有作用到的选择符。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;更好的css选择符，是让浏览器在样式匹配过程中减少匹配查询次数，以更快的速度完成样式匹配，从而优化前端性能&lt;/em&gt;。这其中，也必须参考浏览器的对于样式从右向左的匹配顺序。&lt;/p&gt;

&lt;h2&gt;css选择符的正确使用方式&lt;/h2&gt;

&lt;h3&gt;更特定，更具体的关键选择符&lt;/h3&gt;

&lt;p&gt;关键选择符是浏览器引擎在样式匹配时最先读取到的部分，因此，如果你在某一条样式规则中使用更特定、具体的选择符，可以帮助减少浏览器的查找匹配次数。&lt;/p&gt;

&lt;p&gt;比如说下边这样的选择符：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.content .note span{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后一个&lt;code&gt;span&lt;/code&gt;是关键选择符，而&lt;code&gt;span&lt;/code&gt;这个标签，在网页中使用是非常多的。浏览器从&lt;code&gt;span&lt;/code&gt;开始读取选择符，就可能会为因此在样式匹配上做了一些额外工作。&lt;/p&gt;

&lt;p&gt;如果你确定只是想为具体处于那一个位置的&lt;code&gt;span&lt;/code&gt;元素定义样式，更好的做法是为&lt;code&gt;span&lt;/code&gt;命名class，比如命名为&lt;code&gt;span.note_text&lt;/code&gt;，然后简单写为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.note_text{}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;使用class选择符&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;class选择符（类选择符）是最利于性能优化的选择符&lt;/em&gt;。相对于class，ID的缺点是只允许定义给一个元素，无法重用。而此外，它在使用上没有任何比class更好的地方。很多时候，你很难确定某一个元素是否是唯一的。另外，使用class来定义样式，而保留ID给javascript，一直是一个较好的实践。如果可以，不使用ID来定义样式。&lt;/p&gt;

&lt;p&gt;而相对于class，标签在html中的重复性要更大，因此同样可能让浏览器在样式匹配时做更多的额外工作。如果可以，除css样式清零（reset）外，不使用标签选择符（也叫元素选择符）。&lt;/p&gt;

&lt;h3&gt;缩短选择符序列&lt;/h3&gt;

&lt;p&gt;继承写法（准确地说，这里指css关系选择符中的包含选择符）是css中很常用的写法。继承写法的初衷是，如果有两个元素，都是同样的标签或有相同的class命名，加入父元素的选择符组成选择符序列，就可以避免在不需要的时候两个元素的样式互相影响。比如&lt;code&gt;.confirm_layer .submit_btn&lt;/code&gt;就是指，class名为&lt;code&gt;submit_btn&lt;/code&gt;，且有一个class名为&lt;code&gt;confirm_layer&lt;/code&gt;的父元素的元素，才应用样式。&lt;/p&gt;

&lt;p&gt;但是，避免元素样式相互影响，并不代表可以随意地使用继承选择符。前面提到，浏览器会从右向左读取整个选择符序列，直到读取完毕并匹配完成，或者因不匹配而取消。因此，&lt;em&gt;短的选择符序列更有利于浏览器更快地完成匹配过程&lt;/em&gt;。相对的，冗长的选择符序列则认为是低效的，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.header ul li .nav_link{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建议写为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.header .nav_link{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一般来说，不超过3层的继承层级就可以满足实际中的开发要求。因此，应减少不必要的继承层级，使用更短的选择符序列。&lt;/p&gt;

&lt;p&gt;此外，较长的选择符序列还有一个问题。有较长选择符的样式规则，css优先级的计算值也较大，因此，如果在以后需要写新的样式来覆盖掉它，就需要写更长的选择符（或者使用ID）以获得更高的css优先级。这对性能和代码可读性都是不利的。&lt;/p&gt;

&lt;h3&gt;避免链式选择符&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;链式选择符&lt;/em&gt;（&lt;em&gt;Chaining selectors&lt;/em&gt;）是对单个元素同时写了多个选择符判定的情况。比如&lt;code&gt;p.name&lt;/code&gt;是指class名为&lt;code&gt;name&lt;/code&gt;，且标签是&lt;code&gt;p&lt;/code&gt;的元素，才应用样式。这些判定组合可以是ID选择符，标签选择符，class选择符的任意组合。&lt;/p&gt;

&lt;p&gt;但是，链式选择符是过度定义（over qualified）的，不利于重用，也不利于性能优化。如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a#author{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建议写为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#author{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;a&lt;/code&gt;是不必要的。一个ID只对应一个元素，没有必要再强调这个元素的标签是什么（同理，class也不必）。另外有：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.content span.arrow{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建议写为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.content .arrow{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的&lt;code&gt;span.arrow&lt;/code&gt;中的&lt;code&gt;span&lt;/code&gt;也是不必要的。一方面，这为浏览器在样式匹配时增加了一项额外工作：检查class名为&lt;code&gt;arrow&lt;/code&gt;的元素的标签名是不是&lt;code&gt;span&lt;/code&gt;，也因此降低了性能。另一方面，如果去掉了这个限定，&lt;code&gt;.arrow&lt;/code&gt;的样式定义，就可以用在更多的元素上，也就有着更好的重用性。否则，就还得告诉别人，使用这个的时候只能用在&lt;code&gt;span&lt;/code&gt;标签上。&lt;/p&gt;

&lt;p&gt;同理，多个class的链式写法，如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.tips.succuss{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建议更改命名，写为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.tips_succuss{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样可以帮助浏览器减少额外的样式匹配工作。&lt;/p&gt;

&lt;p&gt;此外，IE6还存在一个链式选择符的问题，多个class选择符写在一起时，例如&lt;code&gt;.class1.class2.class3&lt;/code&gt;，正常情况是只有同时有这全部的class的元素，才应用样式。但IE6只认最后一个，也就是符合&lt;code&gt;.class3&lt;/code&gt;这个选择符的元素，就应用样式。&lt;/p&gt;

&lt;h2&gt;例外情况&lt;/h2&gt;

&lt;p&gt;前面所述的选择符的写法的建议，只是从浏览器渲染性能优化，及代码的重用性方面分析得到的理论结果。在实际使用中，你并不需要严格按照这些内容来做。例如，如果你确实是准备为class名为&lt;code&gt;intro&lt;/code&gt;的元素内的所有&lt;code&gt;a&lt;/code&gt;标签元素都加上某样式，那么&lt;code&gt;.intro a&lt;/code&gt;这样的选择符是明智的。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;关于高效的css选择符的指南，你还可以阅读google developer中的&lt;a href=&quot;https://developers.google.com/speed/docs/best-practices/rendering#UseEfficientCSSSelectors&quot; title=&quot;Use efficient CSS selectors&quot;&gt;Use efficient CSS selectors&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;如今，现代浏览器在样式匹配上也逐渐有了更多的优化（参考&lt;a href=&quot;http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/&quot; title=&quot;CSS Selector Performance has changed! (For the better)&quot;&gt;CSS Selector Performance has changed!&lt;/a&gt;），有些方面的内容我们已经不再需要再担心了。但是，这并不意味着不需要考虑写合理的css选择符了。css选择符性能优化是依然存在的事，你的选择符应该更好地体现你的意图，而不是随心所欲地使用。更重要的是，以这样一种稍细腻的，经过思考的想法来写css选择符，并不是一件困难的事。只要你想，形成这样的一种习惯，你就可以自然地在这方面做得更好，何乐而不为呢？&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>css优先级详细解析</title>
   <link href="http://acgtofe.com/posts/2013/04/css-specificity-explain-in-detail"/>
   <updated>2013-04-21T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/04/css-specificity-explain-in-detail</id>
   <content type="html">&lt;p&gt;css不是一种程序语言，而是一种描述语言。因此，可以说，css理解起来是非常容易的，大部分人通过简单的学习就可以懂得如何写css代码来定义网页的样式。但是，大部分人同样也会在写css的过程中产生很多困惑，比如为什么自己写的某段css没有生效，或者呈现出的样式和预计的不同，但又不知道要如何解决。&lt;/p&gt;

&lt;p&gt;造成这些问题的主要因素，是&lt;em&gt;css优先级&lt;/em&gt;。css优先级是css中最难理解的概念之一，但对于掌握css来说非常重要。理解css优先级，不仅有利于快速解决样式问题，而且能在布局层面，帮助我们写出更明晰，更合理的css代码。&lt;/p&gt;

&lt;h2&gt;什么是css优先级&lt;/h2&gt;

&lt;p&gt;css的组成单元是&lt;em&gt;样式规则&lt;/em&gt;（&lt;em&gt;CSS Rule&lt;/em&gt;），单条样式规则的形式如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201304/css_rule_explain.png&quot; title=&quot;样式规则&quot; alt=&quot;样式规则&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中，&lt;em&gt;选择符&lt;/em&gt;（&lt;em&gt;Selector&lt;/em&gt;）决定了后边所写的属性定义会作用到哪些元素，因此称为选择符。&lt;/p&gt;

&lt;p&gt;css有一个核心特性，当多条样式规则中的同一个属性（比如&lt;code&gt;padding&lt;/code&gt;）作用到了同一个元素，这些样式之间就会发生覆盖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201304/undoing_style_example.png&quot; title=&quot;css样式覆盖示意&quot; alt=&quot;css样式覆盖示意&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中由前端调试工具所显示的，被划掉的css样式，不会呈现在这里选中的网页元素上，因为它们被覆盖掉了。css优先级，就是指在这种情况下，得出“应该由哪一条样式规则的内容覆盖掉其他的”这个结论的过程中所遵循的原则。更一般的表述是，&lt;em&gt;优先级高的css样式，将覆盖优先级低的css样式，成为最终网页元素的实际样式&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;注意，前端调试工具显示的，”被划掉“的css样式，并不是说一定是完全覆盖。css中的一些组合属性（比如&lt;code&gt;margin&lt;/code&gt;，可以拆分为&lt;code&gt;margin-top&lt;/code&gt;、&lt;code&gt;margin-right&lt;/code&gt;、&lt;code&gt;margin-bottom&lt;/code&gt;、&lt;code&gt;margin-left&lt;/code&gt;），在这种样式覆盖中遵循的是局部覆盖的原则，即使在前端调试工具中它们看起来“整个都被划掉了”：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201304/rollup_property_overwrite.png&quot; title=&quot;组合属性覆盖&quot; alt=&quot;组合属性覆盖&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;css优先级的影响因素&lt;/h2&gt;

&lt;p&gt;css优先级的影响因素要考虑三部分内容，&lt;em&gt;css选择符权重&lt;/em&gt;、&lt;em&gt;!important标识符&lt;/em&gt;、&lt;em&gt;属性继承&lt;/em&gt;。很多文章都阐述过css选择符权重这一点，但后面两部分却很少被提及。本文会依照这三部分做详细的说明。&lt;/p&gt;

&lt;h2&gt;属性继承&lt;/h2&gt;

&lt;p&gt;css中一部分属性是&lt;em&gt;可继承属性&lt;/em&gt;，比如文本颜色&lt;code&gt;color&lt;/code&gt;。css优先级的讨论，首先应认清css中的属性继承所带来的影响。由于存在可继承属性，一个网页元素的样式来源可以分为两类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;由css选择符直接定义到元素&lt;em&gt;本身&lt;/em&gt;的样式。&lt;/li&gt;
&lt;li&gt;css选择符未作用到，但&lt;em&gt;继承&lt;/em&gt;自父级元素的样式。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;em&gt;定义到元素本身的样式，包括浏览器默认样式，一定比继承得到的样式优先级高&lt;/em&gt;。因此，可以这样认定：继承得到的样式的优先级是最低的，在任何时候，只要元素本身有同属性的样式定义，就可以覆盖掉继承值：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201304/inherit_property_overwrite.png&quot; title=&quot;可继承属性覆盖&quot; alt=&quot;可继承属性覆盖&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而且，继承样式是最低优先级这一点，是&lt;em&gt;无视继承样式所在的样式规则的内容&lt;/em&gt;的。这就是说，继承样式所在的样式规则，即使其选择符的权重比元素本身样式的选择符的权重更高（本文后文会介绍选择符权重~ :) ），甚至继承样式被写了&lt;code&gt;!important&lt;/code&gt;，继承样式会被元素本身样式覆盖这一点仍然成立。&lt;/p&gt;

&lt;p&gt;举例来说明。下面这段html：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;note_text&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;acgtofe - 动漫与前端技术的综合博客&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对应的css：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;darkblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.note_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;darkorange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个部分在所有浏览器中的效果都是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201304/inherit_regardless_of_selector_specificity.png&quot; title=&quot;继承属性优先级原则无视选择符权重&quot; alt=&quot;继承属性优先级原则无视选择符权重&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再为原来的css增加&lt;code&gt;!important&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;darkblue&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.note_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;darkorange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后，会发现所有浏览器中的效果都不变：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201304/inherit_regardless_of_important.png&quot; title=&quot;继承属性优先级原则无视!important&quot; alt=&quot;继承属性优先级原则无视!important&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当一个元素有多个父级元素都定义了继承样式，这些继承样式之间的优先级又是怎样的？这时候，遵循的优先级原则可以叫做&lt;em&gt;就近原则&lt;/em&gt;，也就是说，&lt;em&gt;在存在多个继承样式时，层级关系距离当前元素最近的父级元素的继承样式，具有相对最高的优先级&lt;/em&gt;。同样，这时候也是无视样式规则内容的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201304/multiple_inherit.png&quot; title=&quot;多个继承属性时的优先级&quot; alt=&quot;多个继承属性时的优先级&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就近原则其实不算是新的结论，想一下，如果把每一个父级元素都作为当前元素，然后按照前边的“元素本身样式大于继承样式”的原则推理一遍，就可以明白，离得最近的父级元素的继承样式优先级最高，是很合理的。&lt;/p&gt;

&lt;h2&gt;css选择符权重&lt;/h2&gt;

&lt;p&gt;css选择符权重是css优先级的核心概念。但在考虑css选择符权重前，请记住，这条优先级原则涉及的样式都是指&lt;em&gt;定义在元素本身的样式&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;每一条样式规则的选择符，除了决定这条样式规则会作用到哪些元素之外，选择符也是浏览器判断css规则优先级的参考信息。css选择符权重不是简单的内容，但却可以用简单而直观的方法做阐述。&lt;/p&gt;

&lt;p&gt;css选择符权重是一个数字游戏，比的就是谁的计算值更大。&lt;em&gt;权重计算值大的样式规则将有更高的优先级&lt;/em&gt;。你可以想象为龙珠里的战斗力测量，在这场权重战争（&lt;a href=&quot;http://www.stuffandnonsense.co.uk/archives/css_specificity_wars.html&quot; title=&quot;CSS: Specificity Wars&quot;&gt;Specificity Wars&lt;/a&gt;，这也是早期的一篇阐述css优先级的文章中用到的词）中，战斗力最强的将取得胜利。&lt;/p&gt;

&lt;p&gt;战斗力的测量方法是统计选择符中的不同组成元素的个数，并以 (a,b,c,d) 这种形式来判断。其中，abcd分别代表了不同类别的选择符组成元素，且战斗力分别在不同的数量级，a最强，d最弱。从弱到强，这4个字母分别代表的类别是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;元素选择符（Element），伪元素选择符（Pseudo Element） d = 1 – (0,0,0,1)&lt;/li&gt;
&lt;li&gt;类选择符 （Class），伪类选择符（Pseudo class），属性选择符（Attribute） c = 1 – (0,0,1,0)&lt;/li&gt;
&lt;li&gt;Id选择符 b = 1 – (0,1,0,0)&lt;/li&gt;
&lt;li&gt;内联样式（Inline style） a = 1 – (1,0,0,0)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;这里的&lt;em&gt;伪元素&lt;/em&gt;和&lt;em&gt;伪类&lt;/em&gt;做一下补充说明。伪元素选择符，指的是样式作用到的元素不是html结构中的实际元素，即不是真正的dom元素。目前只有&lt;code&gt;:before&lt;/code&gt;，&lt;code&gt;:after&lt;/code&gt;，&lt;code&gt;:first-line&lt;/code&gt;，&lt;code&gt;:first-letter&lt;/code&gt;和&lt;code&gt;::selection&lt;/code&gt;这5个伪元素选择符。伪类选择符，则是指除前边的这部分选择符之外，在css中加入冒号&lt;code&gt;:&lt;/code&gt;的，用于实现动态效果与智能控制的选择符，比如&lt;code&gt;:hover&lt;/code&gt;，&lt;code&gt;:nth-of-type(n)&lt;/code&gt;。从css3开始，通过区别使用双冒号&lt;code&gt;::&lt;/code&gt;来表示伪元素，单冒号&lt;code&gt;:&lt;/code&gt;来表示伪类，但为了和以前的浏览器兼容，&lt;code&gt;:after&lt;/code&gt;这种诞生于css2的伪类选择符仍然允许使用单冒号的写法。&lt;/p&gt;

&lt;p&gt;现在，可以找一些css选择符计算一下了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201304/specificity_calculate_example.png&quot; title=&quot;css选择符权重计算举例&quot; alt=&quot;css选择符权重计算举例&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看过这些例子后，请理解为，简单的分类计数，正是css中的战斗力测量方法。(a,b,c,d) 这种形式中，abcd分别是不同的数量级，a&gt;b&gt;c&gt;d，和数字的大小比较方法相同，从高位开始，如果高位数字相同，则取低一位数字比较，以此类推。&lt;em&gt;选择符权重计算值最大的样式规则中的属性，覆盖其他的样式规则中的同名属性&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;如果你觉得自己计算麻烦，请到&lt;a href=&quot;http://specificity.keegan.st/&quot; title=&quot;Specificity Calculator&quot;&gt;Specificity Calculator&lt;/a&gt;，这是一个非常棒的计算器。&lt;/p&gt;

&lt;p&gt;(a,b,c,d) 中，a代表的内联样式实际是存在于html代码中，只能取值为0或1，所以和其他的较为不同。后边的bcd虽说是不同的数量级，但详细说来有多大差距呢？请看下面这一段&lt;a href=&quot;http://hg.mozilla.org/mozilla-central/file/17c65d32c7b8/layout/style/StyleRule.cpp#l521&quot; title=&quot;mozilla-central source&quot;&gt;Firefox浏览器源代码&lt;/a&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201304/firefox_css_selector_source.png&quot; title=&quot;Firefox浏览器源代码-StyleRule&quot; alt=&quot;Firefox浏览器源代码-StyleRule&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出，class和id对应的十六进制数值之间隔了2位，所以，在Firefox中，要256（16&lt;sup&gt;2&lt;/sup&gt;）个class才相当于1个id。在不同浏览器中，这种层级差距，可能有所不同。在写本文的时间点，Opera和Chrome中用256+的class也不能大于id的权重。不过，这些细节信息并不重要，你在实际使用中不可能用到这个数量的选择符。所以，应认为前面所述的权重计算方法是可靠的。&lt;/p&gt;

&lt;p&gt;如果权重计算值相同，则进入后一个环节：样式定义顺序。&lt;/p&gt;

&lt;h3&gt;样式定义顺序&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;权重计算值相同的样式规则，定义顺序靠后的优先级高&lt;/em&gt;。这里的定义顺序，包含了所有的静态样式（不包括由javascript创建&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;或&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;元素引入的样式）定义的可能情况。如直接写在html的&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;标签内的样式规则，通过&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;引入的css文件，以及&lt;code&gt;@import&lt;/code&gt;引入的css文件。&lt;/p&gt;

&lt;p&gt;请记住，只有权重计算值相同的时候，你才需要考虑样式定义顺序。&lt;/p&gt;

&lt;h2&gt;!important标识符&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;!important&lt;/code&gt;是可以写在样式规则中的某一属性定义值后的标识符，用于提升某一属性的样式定义的优先级。不同于决定整条样式规则优先级的css选择符权重，&lt;code&gt;!important&lt;/code&gt;只影响自己所在位置的单一属性。&lt;code&gt;!important&lt;/code&gt;在优先级原则中，可以理解为前文的(a,b,c,d)结构中的，比a更高位的标识：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201304/position_of_css_important.png&quot; title=&quot;!important在优先级原则中的位置&quot; alt=&quot;!important在优先级原则中的位置&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后，你完全再按照前文的css选择符权重的比较方法，就可以得出在这种情况下的css优先级了。具体说的话，可以表述如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;写有&lt;code&gt;!important&lt;/code&gt;标识符的样式，其优先级一定大于没有该标识符的样式。&lt;/li&gt;
&lt;li&gt;在都写有&lt;code&gt;!important&lt;/code&gt;标识符的样式之间，再按照一般的css选择符权重的优先级原则做判断。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;css优先级的浏览器兼容性&lt;/h2&gt;

&lt;p&gt;css优先级虽然是不简单的内容，但幸运的是，除IE6和IE7存在少量优先级的bug（详见&lt;a href=&quot;http://www.brunildo.org/test/IEASpec.html&quot; title=&quot;IE Specificity bugs&quot;&gt;IE Specificity bugs&lt;/a&gt;）外，几乎所有浏览器都很一致地遵循css优先级原则。所以，css优先级是很通用的概念，可以在各种情况下应用而不必担心兼容性。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;css优先级的概念在本文就介绍到此。本文所阐述的仍有不够全面的地方，如果你碰到一些新的问题，欢迎来这里讨论。在实际应用中，理解css优先级并不是让我们去这样分析每一条样式规则，而只是让我们有一个更清醒的状态，知道如何去布局和控制自己所写的css。所谓“知己知彼，百战不殆”，也是这样的道理。&lt;/p&gt;

&lt;p&gt;css全名是层叠样式表（Cascading Style Sheet），css优先级正是这种“层叠”中所遵循的原则，由此也可以看出css优先级的重要性。最后，以一个自制的图来结尾：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201304/special_card_css_specificity_war.jpg&quot; title=&quot;CSS Specificity War&quot; alt=&quot;CSS Specificity War&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Love Live! ED 主题曲 - きっと青春が聞こえる</title>
   <link href="http://acgtofe.com/posts/2013/04/lovelive-ed"/>
   <updated>2013-04-14T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/04/lovelive-ed</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201304/lovelive_ed_cd_cover.jpg&quot; title=&quot;Love Live! ED - きっと青春が聞こえる&quot; alt=&quot;Love Live! ED - きっと青春が聞こえる&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;post_display&quot; style=&quot;height:24px;&quot;&gt;
    &lt;audio src=&quot;http://acgtofe.qiniudn.com/lovelive_ed.mp3&quot; preload=&quot;auto&quot;&gt;&lt;/audio&gt;
&lt;/div&gt;


&lt;p&gt;歌词（自译）&lt;/p&gt;

&lt;p&gt;&lt;small&gt;素直に追いかけて　勇気で追いかけて〖坦率地去追寻　以勇气去追寻〗&lt;br/&gt;
小さな願いが明日を作る〖小小的愿望化作明天〗&lt;br/&gt;
できるかも　みんなが望むなら〖只要大家期望　就能够做到〗  &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;誰より頑張っちゃえ　とにかく情熱のままに〖比谁都更努力　保持满腔的热情〗&lt;br/&gt;
目指すのは綺麗な風吹く道〖以那美丽的　风吹着的道路为目标〗    &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;羽のように　腕あげて〖像展翅一样张开双臂〗&lt;br/&gt;
まぶしい未来へと飛ぶよ〖向那灿烂的未来飞去〗    &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;きっと青春が聞こえる　その瞬間に聞こえる〖一定能听到青春的音符　就在那个瞬间〗&lt;br/&gt;
笑顔ならいつの日も大丈夫！〖保持微笑的话　每天都能过得愉快〗&lt;br/&gt;
きっと青春が聞こえる　その瞬間が見たいね〖一定能听到青春的音符　想要见证那个瞬间〗&lt;br/&gt;
となりに君がいて(嬉しい景色)〖你就在我身旁(令人高兴的景色)〗&lt;br/&gt;
となりは君なんだ〖我的身旁就是你〗    &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;素顔で会いたいよ　元気に会いたいよ〖想素颜相见　想充满活力地相见〗&lt;br/&gt;
きらきら流れる陽射しの元で〖灿烂地照耀着的阳光下〗&lt;br/&gt;
話すのは　みんなのこれからさ〖要说的　是大家从今以后的事〗    &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;誰かが言ってたよ　自分を信じれば叶う〖有人说过　相信自己就可以实现愿望〗&lt;br/&gt;
わかるかも奇跡はつかめるはず〖也许理解的话就可以发生奇迹〗    &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;悔しさを　受けとめて〖所有的后悔　都接受〗&lt;br/&gt;
描いた世界への旅は〖朝着描绘出的世界走出的旅程〗    &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;やっと青春の始まり　この快感をあげたい〖终于到了青春的开始　想要给予这份快感〗&lt;br/&gt;
どこまでも伸びてゆく誇らしさ〖任何地方都一直在增长的自豪感〗&lt;br/&gt;
やっと青春の始まり　この快感が好きだよ〖终于到了青春的开始　喜欢这份快感〗&lt;br/&gt;
本当に君はいて(素敵さいつも)〖你真的存在(一直都很出彩)〗&lt;br/&gt;
本当の君のため〖为了真正的你〗    &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;きっと青春が聞こえる　その瞬間に聞こえる〖一定能听到青春的音符　就在那个瞬间〗&lt;br/&gt;
笑顔ならいつの日も大丈夫！〖保持微笑的话　每天都能过得愉快〗&lt;br/&gt;
きっと青春が聞こえる　その瞬間が見たいね〖一定能听到青春的音符　想要见证那个瞬间〗&lt;br/&gt;
となりに君がいて(嬉しい景色)〖你就在我身旁(令人高兴的景色)〗&lt;br/&gt;
となりは君なんだ〖我的身旁就是你〗    &lt;/small&gt;&lt;/p&gt;

&lt;p&gt;（附：音频播放支持来源于&lt;a href=&quot;http://kolber.github.io/audiojs/&quot; title=&quot;audio.js&quot;&gt;audio.js&lt;/a&gt;）&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>jQuery使用的最佳实践</title>
   <link href="http://acgtofe.com/posts/2013/04/jquery-best-practice"/>
   <updated>2013-04-03T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/04/jquery-best-practice</id>
   <content type="html">&lt;h2&gt;引言&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;jQuery&lt;/em&gt;可以说是web开发领域应用最为广泛的轻量级javascript库，不仅专业的web开发者使用它，很多刚入门的web开发者或者web爱好者也通过使用jQuery轻松地融入到了javascript的开发。&lt;/p&gt;

&lt;p&gt;而如果你还希望在这方面做得更好，就应学习和了解最佳实践。&lt;em&gt;最佳实践&lt;/em&gt;（&lt;em&gt;Best Practice&lt;/em&gt;）是随某一技术领域的发展而逐渐建立起来的关于最新技术和开发方法的信息，在web开发领域也非常有用。&lt;/p&gt;

&lt;p&gt;本文内容参考了杰出前端工程师 &lt;a href=&quot;http://addyosmani.com/blog/&quot; title=&quot;Addy Osmani&quot;&gt;Addy Osmani&lt;/a&gt; 的 &lt;a href=&quot;https://speakerdeck.com/addyosmani/jquery-performance-tips-tricks&quot; title=&quot;jQuery Performance TIPs &amp;amp; Tricks&quot;&gt;jQuery Performance TIPs &amp;amp; Tricks&lt;/a&gt; ，如果有兴趣，你也可以自己看看这位大师的这个演说PPT，Addy Osmani本人也是jQuery的核心团队（jQuery Core teams）的成员之一。&lt;/p&gt;

&lt;h2&gt;为什么需要遵循jQuery最佳实践&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;web开发领域对于性能的追求是永不停滞的&lt;/em&gt;。jQuery虽然是非常强大的开发工具，但不当的使用方法仍会给浏览器带来额外的工作和负担，也会使开发的web应用占用更多的系统资源，运行起来也更慢。而我们都知道，好的web应用需要的是清爽灵活。&lt;/p&gt;

&lt;p&gt;如何判断javascript的性能呢？现在，这种性能测试都可以归纳为运行速度，简单的说，&lt;em&gt;同一项功能，某一种写法如果比另一种写法运行起来更快，那么这种写法就可以实现更好的性能&lt;/em&gt;。当然，这里只单纯从性能角度来考虑，并不包含代码的可维护性。如果你想自己测试不同的javascript代码段的性能，推荐使用 &lt;a href=&quot;http://jsperf.com/&quot; title=&quot;jsperf.com&quot;&gt;jsPerf.com&lt;/a&gt; ，这个站点可以帮助你轻松创建javascript性能测试用例，还可以保存和分享测试结果。jQuery团队也使用它进行javascript性能测试。&lt;/p&gt;

&lt;h2&gt;jQuery使用建议&lt;/h2&gt;

&lt;h3&gt;1.使用最新版&lt;/h3&gt;

&lt;p&gt;新版本的jQuery提供的API会在性能上有所提升，而且修复了一些存在的bug。由于非常多的网站都在使用jQuery，所以jQuery每一个新版本的更改都会经过非常严格的测试，升级一般都不会带来问题。&lt;/p&gt;

&lt;p&gt;此外，新版本的jQuery可能会在API上做非常有用的改动，让开发工作更加简单。比如在jQuery 1.7之前，事件绑定使用&lt;code&gt;bind()&lt;/code&gt;、&lt;code&gt;delegate()&lt;/code&gt;以及&lt;code&gt;live()&lt;/code&gt;这几个方法。虽然都是事件绑定，但每个方法各有针对，这就产生了“什么时候应该使用哪个”的麻烦事。而从jQuery 1.7开始，新增并推荐使用&lt;code&gt;on()&lt;/code&gt;和&lt;code&gt;off()&lt;/code&gt;这2个方法来完成所有的事件绑定与移除，理解起来就要容易多了。&lt;/p&gt;

&lt;h3&gt;2.理解你的选择符&lt;/h3&gt;

&lt;p&gt;在jQuery中，不是所有的选择符（Selectors）都是同等性能的。也就是说，虽然某一些元素你可以用很多种不同的选择符写法来选取，但不要认为它们在性能上也是一样的。&lt;/p&gt;

&lt;p&gt;jQuery的选择符的运行速度是不同的，从最快到最慢依次是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ID选择符（&lt;code&gt;$(#ElementId)&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;元素选择符（&lt;code&gt;$(form)&lt;/code&gt;，&lt;code&gt;$(input)&lt;/code&gt;等）&lt;/li&gt;
&lt;li&gt;Class选择符（&lt;code&gt;$(.someClass)&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;伪类和属性选择符（&lt;code&gt;$(:hidden)&lt;/code&gt;，&lt;code&gt;$([attribute=value])&lt;/code&gt;等）&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;由于浏览器支持的原生DOM操作方法（比如&lt;code&gt;document.getElementById()&lt;/code&gt;）就可用，所以ID选择符和元素选择符是最快的。而稍慢的Class选择符是因为IE6-IE8不支持原生的&lt;code&gt;getElementsByClassName()&lt;/code&gt;，而在支持这个原生方法的其他现代浏览器中，Class选择符仍是很快的。&lt;/p&gt;

&lt;p&gt;至于最慢的伪类和属性选择符，则是因为浏览器并不提供对应功能的可用原生方法。尽管jQuery尝试了使用&lt;code&gt;querySelector()&lt;/code&gt;和&lt;code&gt;querySelectorAll()&lt;/code&gt;这两个原生选择符API（属于css查询API）来提升部分jQuery选择符在部分现代浏览器中的性能，但综合起来，仍然是比较慢的。当然，这也是在于jQuery对伪类和属性选择符这个API要求较高，不仅要支持&lt;code&gt;input[type=&quot;text&quot;]&lt;/code&gt;这种css中合法的选择符，还要支持&lt;code&gt;p:first&lt;/code&gt;这类用于元素过滤，但在css中不合法的选择符。总之，jQuery的伪类和属性选择符功能很强大，但请慎重使用。&lt;/p&gt;

&lt;h3&gt;3.缓存你操作的元素&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.parents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.parents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.child&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//bad&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;缓存是指保存jQuery选择符的返回结果，方便之后再次调用。每一个&lt;code&gt;$('.whatever')&lt;/code&gt;都会重新从DOM中搜索并返回一个jQuery包装集（jQuery collection），因此要避免重复使用。&lt;/p&gt;

&lt;p&gt;原生javascript中，建立局部变量来缓存数据或对象，有利于精简代码、优化性能。这里也是一样的道理。&lt;/p&gt;

&lt;h3&gt;4.链式语法&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.parents&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomethingElse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;jQuery中大部分方法都返回jQuery包装集并支持这种链式语法。javasript的性能优化要点之一是最小化语句数，因此链式语法不仅写起来更容易，运行起来也会更快。&lt;/p&gt;

&lt;h3&gt;5.使用事件代理&lt;/h3&gt;

&lt;p&gt;利用事件冒泡，指定一个位于dom较高层级的元素（比如&lt;code&gt;document&lt;/code&gt;）的事件处理程序，就可以管理某一类型的所有事件。减少了页面中添加的事件处理程序，自然可以提升整体性能。&lt;/p&gt;

&lt;h3&gt;6.最小化现场更新&lt;/h3&gt;

&lt;p&gt;如果你进行操作的DOM部分是已经显示的页面的一部分，那么你就是在进行一个&lt;em&gt;现场更新&lt;/em&gt;。现场更新需要浏览器重新计算尺寸，涉及到重绘（repaint）和回流（reflow），有较高的性能花费，因此应减少使用。&lt;/p&gt;

&lt;p&gt;在新增内容时，建议先把要新增的代码段合并完全，最后再使用单个&lt;code&gt;append()&lt;/code&gt;方法添加到页面。而如果元素存在复杂的交互，比如反复地添加和移除，&lt;code&gt;detach()&lt;/code&gt;这个针对性的方法就是最佳的选择。&lt;/p&gt;

&lt;h3&gt;7.不在不必要的时候使用jQuery方法&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.nav_link&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;nav id: &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//bad&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;jQuery方法不一定是最好的方法。这里使用&lt;code&gt;$(this).attr('id')&lt;/code&gt;获取当前事件元素的ID，为当前事件元素创建了jQuery包装集，然后调用&lt;code&gt;attr()&lt;/code&gt;属性获取方法。但这都是额外的性能花费。事实上，&lt;code&gt;this&lt;/code&gt;在事件函数内就表示当前事件元素，直接使用&lt;code&gt;this.id&lt;/code&gt;就可以获取元素ID，这种原生DOM属性的写法要更快。&lt;/p&gt;

&lt;h3&gt;8.适当使用jQuery工具函数&lt;/h3&gt;

&lt;p&gt;操作jQuery包装集的方法（也就是写在&lt;code&gt;$.fn&lt;/code&gt;中的方法），其中一部分也有作为jQuery工具函数（直接写在&lt;code&gt;$&lt;/code&gt;中的方法）的同类方法。由于jQuery工具函数在使用中不涉及创建jQuery包装集，因此，在部分情况下，可以通过换用jQuery工具函数提升性能。&lt;/p&gt;

&lt;p&gt;比如，在DOM中存储数据，一般的做法是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#elem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//common way&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但改为下边的写法会快很多：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//significantly faster&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要的注意的是，虽然下面这种方法更快，但作为参数传入的元素不能用选择符，而要用元素本身。&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;我自己整理和写本文内容时，也感觉很有收获。jQuery是一个很强大的工具，但进一步说，也只提供了web开发的最基本的内容，更高级更复杂的内容，还需要自己不断学习和创作。在这个过程中，遵循最佳实践，养成良好的习惯，会有很大的益处，并逐渐做得更出色！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>社会秩序与人类意志的选择—PSYCHO-PASS分析与感想</title>
   <link href="http://acgtofe.com/posts/2013/03/thoughts-of-psycho-pass"/>
   <updated>2013-03-26T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/03/thoughts-of-psycho-pass</id>
   <content type="html">&lt;p&gt;在不久的未来，随着科学的不断进步，人类灵魂的秘密也被揭开，社会也由此发生了革命性的变化。人类的心理状态与性格倾向都可以测量并数值化，所有的心理倾向都被记录和管理，这其中可以成为每个人的灵魂的判定标准的测量数值，被人们称为&lt;em&gt;PHYCHO-PASS&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201303/psycho_pass_title.jpg&quot; title=&quot;PSYCHO-PASS&quot; alt=&quot;PSYCHO-PASS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;建立在这种心灵测量数值的基础之上的，被称为&lt;em&gt;西比拉系统&lt;/em&gt;（&lt;em&gt;SIBYL SYSTEM&lt;/em&gt;）的社会管理系统，则通过对社会的每一个人的PHYCHO-PASS进行分析和管理，读取每个人的心理的愿望，个体能力及职业适应性，为每一个人给出最适合的生活方式，并以此建立了一个较为理想和稳定的社会。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201303/mental_color.jpg&quot; title=&quot;色相&quot; alt=&quot;色相&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PHYCHO-PASS的信息的视觉化，反映为&lt;em&gt;色相&lt;/em&gt;，心理状态良好，色相则趋向于白色，心理状态消极，色相则趋于黑色。在色相健康的情况下，PHYCHO-PASS中的信息之一，称为&lt;em&gt;犯罪系数&lt;/em&gt;，会维持在较低的状态。因为某些原因犯罪系数上升，则会被要求接受心理治疗。而当犯罪系数超过指定数值，则会被认定为犯罪者或潜在犯罪者。&lt;/p&gt;

&lt;p&gt;在这个社会，公安局是最为重要的秩序核心。它的刑事科成员，由&lt;em&gt;监视官&lt;/em&gt;和&lt;em&gt;执行官&lt;/em&gt;组成的队伍，则担负着抓捕或处决犯罪者及潜在犯罪者，维护社会治安的重要责任。PHYCHO-PASS的故事由此展开。&lt;/p&gt;

&lt;h2&gt;监视官和执行官&lt;/h2&gt;

&lt;p&gt;大雨，被封锁的案件现场。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“我是即日起被配属到刑事科的常守朱,请多多指教...”&lt;/p&gt;

&lt;p&gt;“抱歉，我们刑事科现在非常缺人，没工夫把你作为新人看待了。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;由此，常守朱成为刑事科一班的第二位监视官，和宜野座伸元监视官一同，带领狡啮慎也、征陆智己、滕秀星和六合冢弥生四位执行官作为刑事科一班执行任务。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;监视官&lt;/em&gt;，如字面意义所示，对执行官进行监控，指挥，并对执行官的行为负责。监视官必须有良好的精神状态，犯罪系数也必须在规定范围内。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201303/official_logo.png&quot; title=&quot;公安局刑事科&quot; alt=&quot;公安局刑事科&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“接下来将要见的家伙们，可不要当做一样的人类来看待。他们是PSYCHO-PASS的犯罪系数超过规定数值的人格破裂者，他们本应作为潜在罪犯而被隔离，唯一允许他们进行的社会活动，就是抓获同为犯罪者的人。他们是猎犬，是为狩猎野兽而存在的野兽，他们便是执行官。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;执行官&lt;/em&gt;是监视官的下属，必须在监视官的陪同下才可以行动，是执行任务的最前线的人。和作为目标的犯罪者有同样气息的他们，更有能力找到和抓捕犯罪者。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“犯罪或者制止犯罪，无论选择哪条路都需要犯罪的才能。……因此才会有我们这些接脏活的猎犬。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;监视官和执行官使用的警用枪械—&lt;em&gt;Dominator&lt;/em&gt;（&lt;em&gt;支配者&lt;/em&gt;），具有严格的使用者及目标的识别系统，在枪口瞄准的时候即可测得目标的犯罪系数，只有犯罪系数超过指定值的犯罪者或潜在犯罪者，才会解除保险允许射击。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201303/banner_dominator.jpg&quot; title=&quot;Dominator&quot; alt=&quot;Dominator&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;犯罪认知&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;“犯罪系数，265，确认为执行对象，解除安全限制。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;依靠西比拉系统，案件处理只需要检测犯罪嫌疑人的犯罪系数，就可以断定出犯罪者。此外，在公共区域常设的色相扫描仪，以及巡视的无人机，也会监测每一个人的犯罪系数，随时向公安局报告异常。&lt;/p&gt;

&lt;p&gt;任何人有过涉及犯罪的行为，或者有犯罪倾向，这些原本深藏于人类内心的信息现在却可以被侦测出。基于这种心灵辨识系统，社会拥有了针对犯罪行为的革命性的控制力。&lt;/p&gt;

&lt;p&gt;但是，许多问题的根源也在此。&lt;/p&gt;

&lt;h2&gt;人生设计&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;“能者成能事，这正是西比拉为人类带来的恩惠。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;我们常说，当所有的东西都在正确的位置的时候，一切都可以平稳运行。西比拉系统测定每个人的个体能力，并给出每个人对应的适合的职业。每个人都不必再困惑于做这些选择，西比拉系统针对每个人所给出的答案，就是这个人正确的、会过得快乐的生活方式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201303/banner_city.jpg&quot; title=&quot;城市&quot; alt=&quot;城市&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么，当一切依托于西比拉系统的时候，西比拉系统本身就必须要求&lt;em&gt;完美&lt;/em&gt;。然而，正如自然界的一般规律，西比拉系统也无法做到完美。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“对将来毫无期待的人生，你们这些被系统祝福的人是不会明白的。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;依照西比拉系统的认定，每个人的个体能力都不相同，优秀的人可以有很多机会，可以从事更多更好的工作，而不被系统认可的人则直接被否决了从事许多工作的可能性，无论这些人自身有多么期望做其他的自己想做的工作。这种差别对待让一部分人对系统抱有怨恨，并感慨“神是不公平的“。但是，这也实际上是任何阶级社会都必然存在的问题。&lt;/p&gt;

&lt;h2&gt;人类意志&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;我啊，认为人们只有在依靠自身意志行动时才拥有价值，所以，我才追寻各种各样的人的潜在想法，并观察他们的行为。&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;西比拉系统的判定在社会总体上为人类带来恩惠的同时，却也忽略了人类的&lt;em&gt;个人意志&lt;/em&gt;。槙岛圣护这位谜一样的男子，策划并诱导了一系列犯罪案件，并希望能通过研究这个社会中的犯罪者们的心理，获取人类意志的秘密，以此肯定人类的存在价值。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“换做是没有西比拉诊断的时代，能不能幸福可是得看运气来的，和以前比起来要好多了吧。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;在这个社会里，当人们面临各种选择的时候，都会倾向于依靠西比拉系统的判定，而无需烦恼于如何做选择。依照西比拉系统的判定去做，自身会过得更幸福，社会也能获得繁荣和稳定。但是，所谓幸福的定义是什么，人生的意义又是什么？在某些人看来，不以自己的个人意志来决定自己的人生，就无法实现幸福和人生意义。自己是应该按照自己所希望的方式活着，还是应该考虑到“为了这个社会好”而遵从社会所希望的自己的方式活着？&lt;/p&gt;

&lt;h2&gt;免罪体质&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;“如果存在能够制裁我的人，那一定是可以凭借自身意志杀人的人。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;免罪体质&lt;/em&gt;，指的是PSYCHO-PASS扫描仪的测量值和犯罪心理并不一致的特殊案例，人数极少，而且这个概念本身是公安局的高层机密。本质而言，是免罪体质者的PSYCHO-PASS无法被西比拉系统解析，因此也就无法被西比拉系统管理，因此也称为特异者。拥有免罪体质的槙岛圣护，自出生起，无论何种情况下，犯罪系数都不会高于指定数值，色相也一直维持纯白的状态。&lt;/p&gt;

&lt;p&gt;免罪体质者永远不会被西比拉系统认定为犯罪者。这些免罪体质者的存在，令人不得不对西比拉系统抱有怀疑和敌意。而槙岛圣护自己，正如狡啮慎也所说，并不把这看做是一种特权，相反，槙岛圣护因为自己无法被西比拉系统解析并纳入社会管理，有着强烈的孤独感，不能被纳入社会，也就是没有被社会承认是“人类”。槙岛圣护决定要研究与目前的社会所不同的，自己以至人类的价值所在。&lt;/p&gt;

&lt;h2&gt;西比拉系统的真相&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;“成为西比拉系统成员的最重要的资格要求是，必须拥有不同于既存人类规范的异常人格，能以非人类的眼光来俯瞰裁定人类的行为。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;随着故事发展，西比拉系统的真相也被揭开。西比拉系统实际上是大量的具有免罪体质的人类大脑的集合体，拥有自己的作为集合体的思想。也就是说，如果西比拉系统是在“统治”着整个社会，那么仍然是“人”在“统治”着整个社会。但西比拉系统自己认为，“他们”早已是超越人类之上的存在，不能再定义为“人类”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201303/sibyl_system.jpg&quot; title=&quot;西比拉系统&quot; alt=&quot;西比拉系统&quot; /&gt;&lt;/p&gt;

&lt;p&gt;依照西比拉系统自身给出的理论，单纯的改善系统，使系统复杂化，是无法实现完美的。所以，换一个角度考虑，得出的结论就是，将系统无法管理的特异者集合在一起，并从中分析寻求出一种共存的手段，便可以得到管理社会的正确的方法。西比拉系统通过不断的吸纳那些与一般人有明显的差距的拥有崭新思想和价值观的人加入，使自己思考的幅度不断扩张，并由此不断进化。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“理想的官吏，借用马克斯·韦伯的话来说，就是既不会愤怒，也不会不公，既没有憎恨，也没有激情，既没有爱，也不会狂热，自始至终只履行自身义务的人。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;从社会学的角度来说，西比拉系统可以说是法制社会的一种极致。考虑一下法制社会，我们理想的情况是，法律完善，在法律面前，所有人都要平等接受审判，法律规定了什么是正确的，什么是不正确的，什么样的行为是犯罪行为。在法制社会，不容许个人主观认定犯罪。而另一方面，法制社会中的法律终归是由人制定，由人来确保执行力，而且体现的也是多数人所能共同认可的内容。结合西比拉系统这个人类大脑的集合体来说，是不是确实有很多相似的地方？&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“系统这东西，比起让其完美地运行，一直相信其是完美的这一点更加重要。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;法制社会中的法律，是无法完善到能正确处理社会生活的每一个细节的。而类似的西比拉系统，也因为免罪体质者的存在，不能认为是完美的。但是，相比于法律世界的辩护和裁决，西比拉系统“看上去”更像是一个只机械化履行义务的符合理想需要的&lt;em&gt;秩序管理者&lt;/em&gt;。人们相信并依赖西比拉系统，才因此有了目前的繁荣和稳定的社会。&lt;/p&gt;

&lt;h2&gt;终局&lt;/h2&gt;

&lt;p&gt;狡啮慎也与槙岛圣护，最终都以自己的个人意志，结束了两人之间的对决。善与恶，是与非，此时都已不再重要，他们都以行动贯彻了自己所坚持的信念，即使是在这个充满秩序的社会中被认为是错误的道路，他们也决心要走下去。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201303/members_on.jpg&quot; title=&quot;刑事科一班&quot; alt=&quot;刑事科一班&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一切都结束之后，已经成长为出色可靠的监视官的常守朱，来了西比拉系统的面前。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“不要小看人类，我们无论何时都在追求着更好的社会，总会有一天有人来关掉这个房间的电源，一定会找到崭新的道路给你看。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;作为这个社会基石的西比拉系统依然存在。至少，目前的社会还不能失去西比拉系统。但是，常守朱坚信着一个不一样的未来。&lt;/p&gt;

&lt;p&gt;依然是一场大雨，以及被封锁的案件现场。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“我是即日起被配属于刑事科的霜月美佳，请多多指教。”&lt;/p&gt;

&lt;p&gt;“抱歉，我们刑事科现在非常缺人，虽然我们会帮助你，但没工夫把你作为新人看待了。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;常守朱冷静地回答道。仍然是刑事科一班，但一切却又变得那么不同。常守朱带领下的刑事科一班的故事还将继续。&lt;/p&gt;

&lt;p&gt;进化着的西比拉系统，以及始终追求着更好社会的人类。社会秩序与人类意志的碰撞下，未来究竟又会如何呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（注：PSYCHO-PASS，译为心理测量者，2012年10月番，一共22集，是动画公司Production I.G制作的原创动画）&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>简单实现固定在页面底部的页脚</title>
   <link href="http://acgtofe.com/posts/2013/03/sticky-footer"/>
   <updated>2013-03-13T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/03/sticky-footer</id>
   <content type="html">&lt;h2&gt;页脚的位置问题&lt;/h2&gt;

&lt;p&gt;网页的页脚（footer），也就是通常用来放置帮助链接及版权信息的地方。页脚自然是应该位于页面底部的，但依照一般的做法，如果位于页脚之前的网页内容比较少，或者说使用了一个垂直分辨率较大的显示器，就有可能出现页脚看起来不在页面底部的情况，如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201303/footer_distance.jpg&quot; title=&quot;页面内容不足的时候，页脚将不能贴到底部&quot; alt=&quot;页脚不能贴到底部&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于页脚基本上是一个网站的所有页面公用的部分，不同页面的内容量有所差异，因此确实有可能某些页面内容不够而出现这样的问题。另外，尤其是包含了底色的页脚，发生这种问题会很影响美观。&lt;/p&gt;

&lt;p&gt;所以，我们希望页脚能够&lt;em&gt;无论网页内容量多少，都准确地位于底部&lt;/em&gt;。&lt;/p&gt;

&lt;h2&gt;固定页脚到底部的方法&lt;/h2&gt;

&lt;h3&gt;绝对定位可行吗？&lt;/h3&gt;

&lt;p&gt;也许有人想到过把页脚设置为&lt;code&gt;position:fixed&lt;/code&gt;，然后定位在底部。先不考虑不支持这个属性值的IE6，从效果上说，如果网页本身内容就很充足，这样的写法就会让页脚一开始就出现在浏览器的底部，而在滚动网页时，页脚会一直保持原位置。这样的效果，显然对大部分的网站都是不适宜的。&lt;/p&gt;

&lt;p&gt;可以想见，我们需要的效果是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;网页内容较多时，在滚动到底部的时候才看到位于最下方的页脚。&lt;/li&gt;
&lt;li&gt;网页内容较少时，页脚仍然位于整个页面的最下方，其余部分留白。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;常规、简单的实现方法&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://ryanfait.com/sticky-footer/&quot; title=&quot;A CSS Sticky Footer&quot;&gt;CSS Sticky Footer&lt;/a&gt;提供了这个固定页脚在底部的合理的实现方法。不过一方面这是一个英文站点，另一方面它所提供的写法还存在些许可以改善的地方，所以本文会参考它的内容，给出一个合理的实现方法。&lt;/p&gt;

&lt;p&gt;首先需要这样一个html结构：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrapper&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!--网页内容--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;footer_placeholder&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!--页脚--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;div.wrapper&lt;/code&gt;是网页中除页脚之外的所有内容的外层容器，页脚&lt;code&gt;div.footer&lt;/code&gt;和它位于同一层级。&lt;code&gt;div.footer_placeholder&lt;/code&gt;必须放在网页所有内容的最后，即作为&lt;code&gt;div.wrapper&lt;/code&gt;的最后一个子元素，它的作用会在后文中说明。&lt;/p&gt;

&lt;p&gt;接下来写css，依次做说明。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当网页内容不足的时候，&lt;code&gt;body&lt;/code&gt;和&lt;code&gt;html&lt;/code&gt;的实际高度可能小于浏览器的可视范围，因此给&lt;code&gt;body&lt;/code&gt;和&lt;code&gt;html&lt;/code&gt;写上高度100%。此外，接下来的直接子元素也会使用百分比的写法，百分比的写法必须在直接父元素有确定的高度定义时才有效。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;min-height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;120px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;/*假定页脚的高度为120px*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所有网页内容都在这个&lt;code&gt;div.wrapper&lt;/code&gt;中，定义最小高度（IE6使用hack），由于这个元素的父元素就是定义了100%高度的&lt;code&gt;body&lt;/code&gt;，因此无论内容多少，&lt;code&gt;div.wrapper&lt;/code&gt;这个元素的高度都会占据整个浏览器可视范围。然后，依照页脚的高度，设置相等的下边距负值，这样页脚就会恰好出现在页面内容的最后。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.footer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.footer_placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;120px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;/*假定页脚的高度为120px*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;div.footer_placeholder&lt;/code&gt;，如字面意义，页脚的占位元素，它只是一个空的&lt;code&gt;div&lt;/code&gt;，定义高度和页脚相同，它的存在是为了给页脚留下位置。如果没有它，可能会发生这样的事情↓&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201303/footer_placeholder.jpg&quot; title=&quot;页脚占位符的作用&quot; alt=&quot;页脚占位符的作用&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到这里，&lt;em&gt;固定在底部的页脚就已经实现了&lt;/em&gt;。css部分合起来是：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;min-height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;120px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;/*假定页脚的高度为120px*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.footer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.footer_placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;120px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果还需要考虑css初始化和清理浮动，可能你还需要添加下面这部分css：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.footer_placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;both&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你现在正在看的本博客，就使用了本文的方法，以保证无论内容多少，页脚都能位于页面底部。我也觉得这是一个非常实用的方法！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>acgtofe博客建设完结纪念</title>
   <link href="http://acgtofe.com/posts/2013/03/acgtofe-complete"/>
   <updated>2013-03-12T00:00:00+08:00</updated>
   <id>http://acgtofe.com/posts/2013/03/acgtofe-complete</id>
   <content type="html">&lt;p&gt;到写下这段文字时，本博客也宣布初步完工。&lt;/p&gt;

&lt;p&gt;本博客的名字是acgtofe，如简介介绍的那样，我会在这里发布有关动漫、游戏、前端技术的博文，你也许看到了demo pages，这是我最开始构思博客的时候觉得可以加入的内容，字面意思理解的话，就是指实例，不过之后具体会是什么，我还在思考中，所以敬请期待。这也是为什么只说本博客是初步完工。&lt;/p&gt;

&lt;p&gt;说起来，把动漫和前端技术结合起来放在一起，还拼凑了这么一个名字，真是预想不到呢。ACG已经是一个很多人都知道的词了，而这个to虽然我是想说就是表示什么“和”什么，不过现在看来，单纯理解为英文介词to也不错...而FE所指的前端开发（Frond-End），相对来说就很少会有人知道了。这也难免，前端开发一词用作职业描述，已经算是比较新的事了。我自己则是前一段时间看国外的博文，偶然看到了这个词，然后查询了一下，才知道这个意思。有没有觉得，中文的翻译特别的直接？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/used-images/posts/201303/bookmark_start.jpg&quot; title=&quot;acgtofe博客建设完结纪念&quot; alt=&quot;acgtofe博客建设完结纪念&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“爱好ACG并从事web前端工作”，参考这样的描述，所以我做了这样的一个博客。希望本博客的内容，无论是对作为ACG同好的你，还是在从事前端工作的你，都能带来一些有用的信息，或者是有学习价值的知识，也或者是一点点的生活乐趣。&lt;/p&gt;

&lt;p&gt;本博客通过&lt;a href=&quot;http://jekyllbootstrap.com/&quot; title=&quot;Jekyll Bootstrap&quot;&gt;Jekyll Bootstrap&lt;/a&gt;搭建，如果你也对做这样的一个博客有兴趣，可以自己搜索相关的介绍信息及教程。&lt;/p&gt;

&lt;p&gt;博客建设完结，撒花！&lt;/p&gt;
</content>
 </entry>
 
 
</feed>